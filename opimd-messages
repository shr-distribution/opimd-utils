#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dbus, e_dbus
from sys import argv
import time
import gettext
from functools import partial
import elementary
from opimd_utils import opimd_reply

try:
	cat = gettext.Catalog("opimd-messages")
	_ = cat.gettext
except IOError:
	_ = lambda x: x

message_list = []
cache = {}
counter = 0
query = None
ended = 0

def format_displayname(result):
  name = result['Name']
  try:
    sn = result['Surname']
    if sn:
      name = name + " " + sn
  except:
    pass
  return name

def resolve_phone(number):
  if number in cache:
    return cache[number]
  else:
    x = contacts.Query({'$phonenumber':number})
    query = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.ContactQuery")
    if query.GetResultCount():
      result = query.GetResult()
      name = format_displayname(result)
      cache[number] = name
      return name
    else:
      name = number
    return name

def get_resolved_name(id):
  query = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Contacts/"+str(id), "org.freesmartphone.PIM.Contact")
  result = query.GetContent()
  name = format_displayname(result)
  cache[id] = name
  return name                                                                

def resolve_time(t):
  try:
    t = float(t)
  except:
    return '' 
  if time.time()-t < 24*60*60:
    return time.strftime('%H:%M',time.localtime(t))
  elif time.time()-t < 24*60*60*2:
    return 'Yesterday'
  else:
    return time.strftime('%d %b',time.localtime(t))

def delete_msg(path, bubble, button, *args, **kwargs):
  inwin = elementary.InnerWindow(win)
  box = elementary.Box(inwin)
  box.show()
  inwin.style_set('minimal')
  inwin.content_set(box)
  label=elementary.Label(box)
  label.label_set(_('Do you really want to delete this message?'))
  label.show()
  box.pack_start(label)
  box2 = elementary.Box(box)
  box2.horizontal_set(True)
  box2.show()

  btyes = elementary.Button(box2)
  btyes.label_set(_('Yes'))
  btyes._callback_add('clicked', partial(delete_yes, inwin, path, bubble, button))
  btyes.show()
  box2.pack_end(btyes)

  btno = elementary.Button(box2)
  btno.label_set(_('No'))
  btno._callback_add('clicked', partial(delete_no, inwin))
  btno.show()
  box2.pack_end(btno)

  box.pack_end(box2)

  win.resize_object_add(inwin)
  inwin.show()
  inwin.activate()

def delete_no(inwin, *args, **kwargs):
  inwin.delete()

def delete_yes(inwin, path, bubble, button, *args, **kwargs):
  delete_no(inwin)
  message = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Message")
  message.Delete()
  bubble.delete()
  del bubble

def destroy(obj, *args, **kargs):
  print "kabum"
  elementary.exit()

# define some nice dbus helper, which I really like, cause make code easier to read :)
def getDbusObject (bus, busname , objectpath , interface):
        dbusObject = bus.get_object(busname, objectpath)
        return dbus.Interface(dbusObject, dbus_interface=interface)

bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())

sources = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Sources", "org.freesmartphone.PIM.Sources")
init=False

def display_message_status(icon, out, data):
  something = 0

  try:
    processing = data['Processing']
    something = 1
  except:
    processing = 0

  try:
    sent = data['MessageSent']
    something = 1
  except:
    sent = 0

  try:
    read = data['MessageRead']
    something = 1
  except:
    read = 0

  try:
    delivered = data['SMS-delivered']
    sent = 1
    something = 1
  except:
    delivered = -1

  if not something:
    return 0

  print _("Out: ") + str(out)   
  print _("Processing: ") + str(processing)
  print _("Sent: ") + str(sent)
  print _("Read: ") + str(read)
  print _("Delivered: ") + str(delivered)
  if out:
    if processing:
      if sent:
        text='unknown'
      else:
        text='sending'
    else:
      if sent:
        if delivered==1:
          text='delivered'
        elif delivered==0:
          text='notdelivered'
        else:
          text='sent'
      else:
        text='unsent'
  else:
    if read:
      text='read'
    else:
      text='unread'
  icon.file_set("/usr/share/pixmaps/opimd-utils/"+text+".png")
#  label.label_set(text)  

def render_message(message, incoming = False):
  bubble = elementary.Bubble(win)

  textbox = elementary.Box(win)
  text = elementary.AnchorBlock(win)
  textbox.pack_start(text)

  content = message.get('Content')
  if not content:
    content = ''
  content = elementary.Entry.utf8_to_markup(content)
  if not content:
    content = ''
  text.text_set(content)
  text.show()

  if message.has_key('Timestamp'):
    timestamp = resolve_time(message['Timestamp'])
  else:
    timestamp = ''

  icon = elementary.Icon(win)
  icon.show()
  bubble.icon_set(icon)

  if message['Direction']=='in':
    out = 0
    if message.has_key('Peer'):
      number = message['Peer']
    else:
      number = message['Sender']
    if message.has_key('@Contacts'):
      name = get_resolved_name(message['@Contacts'])
    else:
      name = resolve_phone(number)
    bubble.label_set(name)
    bubble.info_set(timestamp)
  else:
    out = 1
    bubble.corner_set("top_right")
    if message.has_key('Peer'):
      number = message['Peer']
    else:
      number = message['Recipient']

    if message.has_key('@Contacts'):
      name = get_resolved_name(message['@Contacts'])
    else:
      name = resolve_phone(number)
    bubble.info_set(name)
#    bubble.label_set(timestamp)

  display_message_status(icon, out, message)

  messageproxy = getDbusObject(bus, "org.freesmartphone.opimd", message['Path'], "org.freesmartphone.PIM.Message")
  signal = messageproxy.connect_to_signal("MessageUpdated", partial(display_message_status, icon, out))


#  photo = elementary.Photo(win)
#  photo.size_set(3)
#  bubble.icon_set(photo)
#  photo.show()

  bubble.content_set(textbox)

  bubble.show()
  bubble.size_hint_weight_set(-1.0, 0.0)
  bubble.size_hint_align_set(-1.0, -1.0)

  btnframe = elementary.Frame(win)
  btnframe.style_set("outdent_bottom")
  btnframe.size_hint_weight_set(1.0, 0.0)
  btnframe.size_hint_align_set(-1.0, -1.0)
  btnframe.show()

  deletebutton = elementary.Button(win)
  deletebutton.label_set(_("Delete"))
  deletebutton._callback_add('clicked', partial(delete_msg, message['Path'], bubble))
  deletebutton.show()
  deletebutton.size_hint_weight_set(1.0, 0.0)
  deletebutton.size_hint_align_set(1.0, -1.0)

  hbox = elementary.Box(win)
  hbox.horizontal_set(1)
  hbox.show()

  if message['Direction']=='in':
    replybutton = elementary.Button(win)
    replybutton.label_set(_("Reply"))
    replybutton._callback_add('clicked', partial(opimd_reply.reply, [number, name], '', bus, win, None, None, None))
    replybutton.show()
    replybutton.size_hint_weight_set(0.0, 0.0)
    replybutton.size_hint_align_set(0.0, -1.0)
    hbox.pack_start(replybutton)

  hbox.pack_end(deletebutton)

  btnframe.content_set(hbox)

  textbox.size_hint_weight_set(-1.0, 0.0)
  textbox.size_hint_align_set(-1.0, -1.0)
  text.size_hint_weight_set(-1.0, 0.0)
  text.size_hint_align_set(-1.0, -1.0)

  textbox.pack_end(btnframe)
  textbox.show()

  message_list.append((bubble,signal))
  if incoming:
    box.pack_start(bubble)
  else:
    box.pack_end(bubble)

#  win.show()

def add_new_message(q):
  message = getDbusObject (bus, "org.freesmartphone.opimd", q, "org.freesmartphone.PIM.Message")
  result = message.GetContent()
  render_message(result, True)

def clean_list(*args, **kwargs):
  global message_list
  for message in message_list:  
    try: 
      bubble = message[0]
      signal = message[1]
      bubble.delete()
      if signal:
        signal.remove()
      del signal
      del bubble
    except:
      pass
  message_list = []

def go_next(obj, *args, **kwargs):
  if not ended:
    proceed(kwargs.get('num'))

def end(x):
  global ended
  ended = 1
  label = elementary.Label(win)
  label.label_set(_("No more messages."))
  label.show()
  message_list.append([label, None])
  box.pack_end(label)
  print str(x)

def proceed(num = 5):
  if not num:
    num = 5
  global counter
  if counter<num:
    query.GetResult(reply_handler=partial(next_result, num = num), error_handler=end)
  else:
    print _("Counter reached")
#    next = elementary.Button(win)
#    next.label_set("Next page")
#    next.scale_set(2.0)
#    next.show()
#    next.clicked = go_next
#    box.pack_end(next)
    counter = 0

def next_result(res, *args, **kwargs):
  global counter
  counter = counter + 1
#  query.Skip(-2, reply_handler=proceed, error_handler=end)
  render_message(res)
  proceed(kwargs.get('num'))

def promote_page(page, *args, **kwargs):
  pager.content_promote(page)

elementary.init()
win = elementary.Window('opimd-messages', elementary.ELM_WIN_BASIC)
win.title_set(_("Messages"))

bg = elementary.Background(win)
win.resize_object_add(bg)
bg.show()

pager = elementary.Pager(win)
win.resize_object_add(pager)
pager.show()

list = elementary.List(win)
list.size_hint_align_set(-1.0, -1.0)
list.size_hint_weight_set(1.0,  1.0)

message_page = elementary.Box(win)

scroll = elementary.Scroller(win)
pager.content_push(message_page)
message_page.pack_start(scroll)
scroll.size_hint_align_set(-1.0, -1.0)
scroll.size_hint_weight_set(1.0,  1.0)
scroll.show()
scroll.bounce_set(0, 0)

backbtn = elementary.Button(win)
backbtn.label_set(_('Back'))
backbtn.size_hint_align_set(-1.0, 0.0)
backbtn.show()
backbtn._callback_add('clicked', partial(promote_page, list))
message_page.pack_end(backbtn)

box = elementary.Box(win)
box.show()

box.size_hint_weight_set(1.0, 0.0)
box.size_hint_align_set(-1.0, -1.0)

scroll.content_set(box)

scroll._callback_add('edge,bottom', partial(go_next, num = 1))

messages = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Messages", "org.freesmartphone.PIM.Messages")
contacts = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Contacts", "org.freesmartphone.PIM.Contacts")

messages.connect_to_signal("NewMessage", add_new_message)

def display_query(peer = None, *args, **kargs):
  promote_page(message_page)
  global query, ended, counter
  counter = 0
  clean_list()
  if query:
    query.Dispose()
  global ended
  ended = 0
  print _("Querying...")
  dict = {'_resolve_phonenumber':True, '_sortby':'Timestamp', '_sortdesc':True}
  if peer:
    dict['$phonenumber'] = peer

  print dict
  x = messages.Query(dict)

  print _("Query: ") + x
  query = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.MessageQuery")
  total_results = query.GetResultCount()
  print _("Number of results: ") + str(total_results) 

  #total_results = 10
  #results = query.GetMultipleResults(total_results)

  #for i in results:
    #print "Result nr "+str(i+1)+":"
    #result = query.GetResult()

  #  render_message(results[i])

  counter = 0
  #query.Skip(total_results-1)
  proceed()

  print _("Finished") # finito, fertig, koniec etc.

#if len(argv)>1:
#  display_query(argv[1])
#else:
#  display_query()

x = contacts.Query({'_sortby':'Name'})
quer = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.ContactQuery")
results = quer.GetMultipleResults(-1)

x = messages.Query({'Direction':'in','MessageRead':0,'_resolve_phonenumber':True})
query2 = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.MessageQuery")
unread_msgs = query2.GetMultipleResults(-1)
unread = len(unread_msgs)
unread_contacts = []
for msg in unread_msgs:
  if msg.get('@Contacts'):
    unread_contacts.append(msg['@Contacts'])
query2.Dispose()
quer.Dispose()

def read_handler(item, name, unread, x, *args, **kargs):
  query2 = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.MessageQuery")
  count = query2.GetResultCount()
  count = count - unread
  if unread:
    item.label_set(_("%s (%d unread, %d read)") % (name, unread, count))
  else:
    item.label_set(_("%s (%d read)") % (name, count))
  query2.Dispose()

def read_error(x, *args, **kargs):
  print str(x)

for result in results:
  if not result.get('Phone'):
    print result
    continue
  if result['EntryId'] in unread_contacts:
    x = messages.Query({'$phonenumber': result.get('Phone'), 'MessageRead':0, 'Direction':'in'})
    query2 = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.MessageQuery")
    unr = query2.GetResultCount()
    item = list.item_prepend(_("%s (%d unread)") % (result.get('Name'), unr), None, None, partial(display_query, result.get('Phone')))
    query2.Dispose()
  else:
    unr = 0
    item = list.item_append(result.get('Name'), None, None, partial(display_query, result.get('Phone')))
  messages.Query({'$phonenumber': result.get('Phone')}, reply_handler=partial(read_handler, item, result.get('Name'), unr), error_handler=read_error)

if unread:
  txt = _('%s (%d unread)') % (_('All messages'), unread)
else:
  txt= _('All messages')

item = list.item_prepend(txt, None, None, partial(display_query, None))

messages.Query({'MessageRead':1}, reply_handler=partial(read_handler, item, _("All messages"), unread), error_handler=read_error)

list.go()

list.show()

pager.content_push(list)
  
win.callback_destroy_add(destroy)
win.show()


elementary.run()
if query:
  query.Dispose()
elementary.shutdown()
