#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dbus, e_dbus
from sys import argv
from functools import partial
from opimd_utils import opimd_reply
from re import escape
from ecore import timer_add
import phoneutils
import gettext
import elementary


try:
	cat = gettext.Catalog("opimd-contacts")
	_ = cat.gettext
except IOError:
	_ = lambda x: x

# define some nice dbus helper, which I really like, cause make code easier to read :)
def getDbusObject (bus, busname , objectpath , interface):
        dbusObject = bus.get_object(busname, objectpath)
        return dbus.Interface(dbusObject, dbus_interface=interface)

phoneutils.init()

bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())

contacts = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Contacts", "org.freesmartphone.PIM.Contacts")

types = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Contacts", "org.freesmartphone.PIM.Fields")

query = None

elementary.init()

def field_type(name):
  return types.GetType(name)

def dbus_ok(*args, **kwargs):
  pass

def dbus_error(x):
  print "dbus error: " + str(x)

def destroy(*args, **kargs):
#  print "kabum"
  elementary.exit()

win = elementary.Window("opimd-contacts", 0)
win.title_set(_("Contacts"))

bg = elementary.Background(win)
win.resize_object_add(bg)
bg.show()

pager = elementary.Naviframe(win)
win.resize_object_add(pager)
pager.show()

mainbox = elementary.Box(win)
mainbox.show()
pager.item_simple_push(mainbox)

win.callback_delete_request_add(destroy)

def sanity_name(name, startline = True):
  if startline:
    result = '^'
  else:
    result = ''
  name = name.decode('utf-8')
  for char in name:
    if char!='':
      lower = char.lower()
      upper = char.upper()
      if lower!=upper:
        result += '['+escape(char.upper()+char.lower())+']'
      else:
        result += escape(char)
#  print result
  return result

def sanity_mail(mail):
  if mail!='':
    return '^'+sanity_name(mail, False)
  else:
    return '^'

def sanity_phone(phone):
  return escape(phoneutils.normalize_number(phone))

def query_contacts_query_handler(callback, x=None, *args, **kwargs):
  if kwargs.get('query'):
    query = kwargs['query']
    dbus_err = dbus_ok
  else:
    query = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.ContactQuery")
    query.connect_to_signal('ContactAdded', partial(list_contact, go=True))
    dbus_err = dbus_error

  #num = query.GetResultCount()

  query.GetMultipleResults(6, reply_handler=partial(callback, query=query, next=kwargs.get('next'), dontdispose=kwargs.get('dontdispose')), error_handler=dbus_err)

  if not kwargs.get('dontdispose'):
    query.Dispose(reply_handler=dbus_ok, error_handler=dbus_err)

def query_contacts(callback, name = None, que = None):
  if name:
    phone = sanity_phone(name)
    mail = sanity_mail(name)
    name = sanity_name(name)
    dict = {'Name':name, '_limit':3, 'Surname':name, 'Nickname':name, 'Phone':phone, 'E-mail': mail, '_at_least_one':True}
    dispose = False
  else:
    dict = {'_sortby':'Name'}
    dispose = True
  if not que:
    contacts.Query(dict, reply_handler=partial(query_contacts_query_handler, callback, dontdispose=dispose), error_handler=dbus_error)
    global query
    if query:
      query.Dispose(reply_handler=dbus_ok, error_handler=dbus_error)
      query = None
  else:
    query_contacts_query_handler(callback, dontdispose=True, query=que, next=True)

list = elementary.List(win)
list.size_hint_align_set(-1.0, -1.0)
list.size_hint_weight_set(1.0, 1.0)
mainbox.pack_start(list)
list.show()

def display_contacts(list, name = None):
  loading = elementary.InnerWindow(win)
  win.resize_object_add(loading)
  loading.show()
  loading.style_set('minimal')
  label = elementary.Label(loading)
  label.scale_set(2.0)
  loading.content_set(label)
  label.text_set(_("Searching..."))
  label.show()
  loading.show()
  query_contacts(partial(display_contacts_callback, loading), name)

def list_contact(path, *args, **kwargs):
  if not kwargs.get('data'):
    contactif = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
    contact = contactif.GetContent()
  else:
    contact = kwargs['data']
#  print contact['Path']
  photo = elementary.Photo(list)
  photo.scale_set(0.9)
  if 'Photo' in contact:
    photo.file_set(contact['Photo'])
  name = contact.get('Name')
  if not name:
    name = contact.get('Surname')
    if not name:
      name = contact.get('Nickname')
      if not name:
        name = contact.get('Phone')
        if not name:
          name = contact.get('E-mail')
          if not name:
            name = '<???>'
  if isinstance(name, dbus.Array):
    name = name[0]
  if contact.get('Name') and contact.get('Surname'):
    surname = contact['Surname']
    if isinstance(surname, dbus.Array):
      surname = surname[0]
    name += ' ' + surname
  callbtn = None
  if check_contact(contact, 'Phone'):
    callbtn = elementary.Button(list)
    callbtn.text_set(_("Call"))
    callbtn.show()
    callbtn._callback_add('clicked', partial(select_field, contact, 'Phone', call))
  list.item_append(name, photo, callbtn, partial(display_contact, contact['Path'], data=contact))
  if kwargs.get('go'):
    list.go()  

def display_contacts_callback(loading, contact_list, *args, **kwargs):
  if not kwargs.get('next'):
    list.clear()
  for contact in contact_list:
#    print contact['Path']
    list_contact(contact['Path'], data=contact)
  list.go()
  if loading:
    loading.delete()
  if kwargs.get('query'):
    if kwargs.get('next'):
      global query
      query = kwargs.get('query')
    if len(contact_list)>0:
      query_contacts(partial(display_contacts_callback, None), None, kwargs['query'])
#  elif kwargs.get('query') and kwargs.get('next'):
#    kwargs['query'].Dispose(reply_handler=dbus_ok, error_handler=dbus_error)

def search_changed(frame, obj, *args, **kwargs):
  text = obj.markup_to_utf8(obj.entry_get())
  if text:
    if "\n" in text:
      obj.delete()
      close_search(frame)
    else:
      display_contacts(list, text)

def close_search(frame, *args, **kwargs):
  frame.delete()
  del frame
  display_contacts(list)
  make_downbox()

def nothing(*args, **kwargs):
  print _("nothing called")

def search(downbox, obj, *args, **kwargs):
  frame = elementary.Frame(win)
  frame.text_set(_("Type name to search..."))
  frame.show()
  frame.size_hint_weight_set(1.0, 0.0)
  frame.size_hint_align_set(-1.0, -1.0)

  entryscr = elementary.Scroller(win)
  entryscr.content_min_limit(0,1)
  entryscr.bounce_set(0, 0)
  entryscr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_OFF)
  entryscr.size_hint_weight_set(1.0, 0.0)
  entryscr.size_hint_align_set(-1.0, -1.0)
  entry = elementary.Entry(win)
  entry.show()
  entry.size_hint_weight_set(1.0, 0.0)
  entry.size_hint_align_set(-1.0, -1.0)
#  entry.single_line_set(True)
  entryscr.content_set(entry)
  entryscr.show()

  entry.focus_set(True)

  entry._callback_add('changed', partial(search_changed, frame))

  downbox.delete()

  frame.content_set(entryscr)

  mainbox.pack_start(frame)
  obj._callback_add('clicked', nothing)

def pager_pop(pager, *args, **kwargs):
  pager.item_pop()

def inwin_close(dia, *args, **kwargs):
  if kwargs.get('callback'):
    kwargs['callback']()
  dia.hide()
  dia.delete()
  return False

def ussd_ok(dia, *args, **kwargs):
  dia.delete()

def ussd_error(dia, label, x, *args, **kwargs):
  label.text_set(_("Error while sending USSD request!"))
  timer_add(3, partial(inwin_close, dia))
  print str(x)

def call(to, *args, **kwargs):
  #print "calling to "+to
  if to[len(to)-1]=='#' or len(to)<=2:
    dia = elementary.InnerWindow(win)
    win.resize_object_add(dia)
    dia.activate()
    dia.show()
    dia.style_set('minimal')
    label = elementary.Label(win)
    label.text_set(_("Sending USSD request..."))
    label.show()
    dia.content_set(label)
    network = getDbusObject (bus, "org.freesmartphone.ogsmd", "/org/freesmartphone/GSM/Device", "org.freesmartphone.GSM.Network")
    network.SendUssdRequest(to, reply_handler=partial(ussd_ok, dia), error_handler=partial(ussd_error, dia, label))
  else:
    call = getDbusObject (bus, "org.freesmartphone.ogsmd", "/org/freesmartphone/GSM/Device", "org.freesmartphone.GSM.Call")
    call.Initiate(to, 'voice', reply_handler=dbus_ok, error_handler=dbus_error)

def mail(to, *args, **kwargs):
  #print "mailing to "+to
  dia = elementary.InnerWindow(win)
  win.resize_object_add(dia)
  dia.show()
  dia.style_set('minimal')
  label = elementary.Label(win)
  label.text_set(_("Not yet implemented"))
  label.show()
  dia.content_set(label)
  dia.activate()
  timer_add(3, partial(inwin_close, dia))

def sms_status(dia, icon, label, status):
  if status=='storing':
    dia.show()
    dia.activate()
  elif status=='error':
    dia.hide()
  elif status=='sent':
    label.text_set(_("Message sent!"))
    timer_add(3, partial(inwin_close, dia))
  elif status=='cancelled':
    dia.delete()

def sms(to, *args, **kwargs):
  #print "smsing to " + kwargs['contact']['Name'] + ' ' + to
  dia = elementary.InnerWindow(win)
  win.resize_object_add(dia)
  dia.style_set('minimal')
  label = elementary.Label(dia)
  label.text_set(_("Sending..."))
  label.show()
  dia.content_set(label)
  opimd_reply.reply([to, kwargs['contact']['Name']], '', bus, win, None, None, partial(sms_status, dia, None, label))

def select_field(contact, fieldname, callback, *args, **kwargs):
  result=[]
  for field in contact:
    if field_type(fieldname)==field_type(field):
      if not isinstance(contact[field], dbus.Array):
        values = [contact[field]]
      else:
        values = contact[field]
      for value in values:
        result.append((field,value))

  if len(result)==1:
    callback(result[0][1], contact=contact)
  else:
    dia = elementary.InnerWindow(win)
    win.resize_object_add(dia)
    dia.activate()
    dia.show()

    box = elementary.Box(win)
    box.show()

    dia.content_set(box)

    list = elementary.List(win)
    list.show()
    box.pack_start(list)
    list.size_hint_weight_set(1.0, 1.0)
    list.size_hint_align_set(-1.0, -1.0)

    for res in result:
      display = res[1]

      list.item_append(res[0]+': '+display, None, None, partial(inwin_close, dia, callback=partial(callback, res[1], contact=contact)))

    list.go()

    btn = elementary.Button(win)
    btn.text_set('Close')
    btn.size_hint_weight_set(-1.0, 0.0)
    btn.size_hint_align_set(-1.0, 0.0)
    btn.show()
    btn._callback_add('clicked', partial(inwin_close, dia))

    box.pack_end(btn)

def check_contact(contact, fieldname):
  for field in contact:
    if field.lower().endswith(fieldname.lower()):
      return True
  return False

def del_contact(path, *args, **kargs):
  pager.item_pop()
  contact = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
  contact.Delete()

def save_contact(path, data, *args, **kwargs):
  data = data.return_data()
  pager.item_pop()
  if path:
    contact = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
    contact.Update(data)
  else:
    path = contacts.Add(data)
  display_contact(path)

class Field():
  field_name = None
  entry = None
  deleted = None

  def __init__(self, win, table, num,field, value = None, allowdel = True):
    frame = elementary.Frame(win)
    frame.style_set('outdent_top')
    frame.size_hint_weight_set(1.0, 1.0)
    frame.size_hint_align_set(-1.0, 1.0)
#    frame.show()
    label = elementary.Label(win)
    label.text_set(field+':')
    label.scale_set(1.25)
    label.show()
    label.size_hint_weight_set(-1.0, 0.0)
    label.size_hint_align_set(-1.0, 0.5)
    table.pack(label, 0, num, 1, 1)

    entryscr = elementary.Scroller(win)
    entryscr.content_min_limit(0,1)
    entryscr.bounce_set(0, 0)
    entryscr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_OFF)
    entryscr.size_hint_weight_set(1.0, 0.0)
    entryscr.size_hint_align_set(-1.0, 0.5)
    entry = elementary.Entry(win)
    entry.show()
    entry.size_hint_weight_set(1.0, 0.0)
    entry.size_hint_align_set(-1.0, 1.0)
#    entry.single_line_set(True)
#    entry.scale_set(1.5)
#    entry.password_set(True)
    if value:
      value = entry.utf8_to_markup(str(value))
      if value:
        entry.entry_set(value)
    entryscr.content_set(entry)
    entryscr.show()
    table.pack(entryscr, 1, num, 1, 1)

    delb = elementary.Button(win)
    delb.text_set('X')
    delb._callback_add('clicked', self.delete)
    if allowdel:
       delb.show()
    table.pack(delb, 2, num, 1, 1)

    self.field_name = field
    self.entry = entry
    self.entryscr = entryscr
    self.delbtn = delb
    self.label = label
    self.frame = frame
    self.deleted = False
    table.pack(frame, 1, num+1, 1, 1)

  def get_value(self):
    if not self.deleted:
      value = self.entry.markup_to_utf8(self.entry.entry_get())
    else:
      value = ''
    return value

  def delete(self, *args, **kwargs):
    self.deleted = True
    self.frame.delete()
    self.entryscr.delete()
    self.label.delete()
    self.delbtn.delete()

class Photo(Field):
  pass # TODO

class EditContact():
  fields = None
  i = None

  def __init__(self, path, data, table):
    self.fields = []
    field = Field(win, table, 0, 'Name', data.get('Name'), False)
    self.fields.append(field)
    self.i = 2
    if not path:
      field = Field(win, table, self.i, 'Phone','')
      self.fields.append(field)
      self.i += 2
    for fie in data:
      if not fie in ['Name','Path', 'EntryId', 'contacts_id']:
        values = data[fie]
        if not isinstance(data[fie], dbus.Array):
          values = [values]
        for value in values:
          if fie=="Photo":
            Fclass = Photo
          else:
            Fclass = Field
          field = Fclass(win, table, self.i, fie, value)
          self.fields.append(field)
          self.i += 2
    self.win = win
    self.table = table

  def add_field(self, fie, value = None):
    field = Field(self.win, self.table, self.i, fie, value)
    self.fields.append(field)
    self.i += 2

  def return_data(self):
    result = {}
    for field in self.fields:
      value = field.get_value()
      if not result.get(field.field_name):
        result[field.field_name] = value
      elif not field.deleted and not isinstance(result[field.field_name], __builtins__.list):
        result[field.field_name] = [result[field.field_name], value]
      elif not field.deleted:
        result[field.field_name].append(value)
    return result

def add_field2(dia, entry, edit, *args, **kargs):
  field = entry.entry_get()
  if field:
    field = entry.markup_to_utf8(field)
  if field:
    edit.add_field(field)
  inwin_close(dia)

def add_field(edit, *args, **kargs):
  dia = elementary.InnerWindow(win)
  dia.style_set('minimal_vertical')
  dia.show()
  win.resize_object_add(dia)
  box = elementary.Box(win)
  dia.content_set(box)
  box.show()

  label = elementary.Label(win)
  label.size_hint_align_set(-1.0, 0.0)
  label.text_set(_("Enter field name:"))
  label.show()
  box.pack_start(label)

  entryscr = elementary.Scroller(win)
  entryscr.content_min_limit(0,1)
  entryscr.bounce_set(0, 0)
  entryscr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_OFF)
  entryscr.size_hint_weight_set(1.0, 0.0)
  entryscr.size_hint_align_set(-1.0, -1.0)
  entry = elementary.Entry(win)
  entry.scale_set(1.25)
  entry.show()
  entry.size_hint_weight_set(1.0, 0.0)
  entry.size_hint_align_set(-1.0, -1.0)
  entry.single_line_set(True)
  entryscr.content_set(entry)
  entryscr.show()
  box.pack_end(entryscr)

  bbox = elementary.Box(win)
  bbox.size_hint_weight_set(1.0, 0.0)
  bbox.size_hint_align_set(-1.0, 0.0)
  bbox.horizontal_set(True)
  box.pack_end(bbox)
  bbox.show()

  add = elementary.Button(win)
  add.text_set(_("Add"))
  add.size_hint_weight_set(1.0, 0.0)
  add.size_hint_align_set(-1.0, 0.0)
  add._callback_add('clicked', partial(add_field2, dia, entry, edit))
  add.show()
  bbox.pack_end(add)

  quit = elementary.Button(win)
  quit.text_set(_("Quit"))
  quit.size_hint_weight_set(1.0, 0.0)
  quit.size_hint_align_set(-1.0, 0.0)
  quit._callback_add('clicked', partial(inwin_close, dia))
  quit.show()
  bbox.pack_end(quit)

  dia.show()
  dia.activate()

def edit_contact(path, *args, **kwargs):
  if path:
    if not kwargs.get('data'):
      contact = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
      data = contact.GetContent()
    else:
      data = kwargs['data']
    pager.item_pop()
  else:
    data = {}

  box = elementary.Box(win)
  box.show()
  pager.item_simple_push(box)

  scr = elementary.Scroller(win)
  scr.bounce_set(0, 0)
  scr.size_hint_weight_set(1.0, 1.0)
  scr.size_hint_align_set(-1.0, -1.0)
  scbox = elementary.Table(win)
  scbox.show()
  scbox.size_hint_weight_set(1.0, -1.0)
  scbox.size_hint_align_set(-1.0, -1.0)
  scr.content_set(scbox)
  box.pack_start(scr)
  scr.show()

  edit = EditContact(path, data, scbox)

  newfie = elementary.Button(win)
  newfie.text_set(_("New field"))
  newfie._callback_add('clicked', partial(add_field, edit))
  newfie.size_hint_weight_set(1.0, 0.0)
  newfie.size_hint_align_set(-1.0, -1.0)
  newfie.show()
  box.pack_end(newfie)


  bbox = elementary.Box(win)
  bbox.horizontal_set(True)
  bbox.size_hint_weight_set(1.0, 0.0)
  bbox.size_hint_align_set(-1.0, -1.0)
  bbox.show()
  box.pack_end(bbox)

  save = elementary.Button(win)
  save.text_set(_("Save"))
  save._callback_add('clicked', partial(save_contact, path, edit))
  save.size_hint_weight_set(1.0, 0.0)
  save.size_hint_align_set(-1.0, -1.0)
  save.show()
  bbox.pack_end(save)

  if path:
    delbtn = elementary.Button(win)
    delbtn.text_set(_("Delete"))
    delbtn._callback_add('clicked', partial(del_contact, path))
    delbtn.show()
    bbox.pack_end(delbtn)

  back = elementary.Button(win)
  back.text_set(_("Back"))
  back._callback_add('clicked', partial(pager_pop, pager))
  back.show()
  bbox.pack_end(back)

def display_contact(path, *args, **kwargs):
#  print "displaying " + path
  if not kwargs.get('data'):
    contact = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
    data = contact.GetContent()
  else:
    data = kwargs['data']

  box = elementary.Box(win)
  box.show()
  pager.item_simple_push(box)

  bottombox = elementary.Box(win)
  bottombox.size_hint_weight_set(1.0, 0.0)
  bottombox.size_hint_align_set(-1.0, 0.0)
  bottombox.horizontal_set(True)
  bottombox.show()
  box.pack_end(bottombox)

  isphone = check_contact(data, 'Phone')
  ismail = check_contact(data, 'E-mail')

  if isphone or ismail:
    hover = elementary.Hoversel(win)
    hover.hover_parent_set(pager)
    hover.text_set('Actions')
    bottombox.pack_end(hover)
    hover.size_hint_weight_set(1.0, 0.0)
    hover.size_hint_align_set(-1.0, 0.0)
    hover.scale_set(1.0)
    hover.show()

  if isphone:
    hover.item_add('Call',"arrow_down",
                elementary.ELM_ICON_STANDARD,partial(select_field,data, 'Phone', call))
    hover.item_add('SMS',"arrow_down",
                elementary.ELM_ICON_STANDARD,partial(select_field,data, 'Phone', sms))

  if ismail:
    hover.item_add('E-mail',"arrow_down",
                elementary.ELM_ICON_STANDARD,partial(select_field,data, 'E-mail', mail))

  editbtn = elementary.Button(bottombox)
  editbtn.text_set(_("Edit"))
  editbtn.show()
  editbtn._callback_add('clicked', partial(edit_contact, path, data=data))
  if not (isphone or ismail):
    editbtn.size_hint_weight_set(1.0, 0.0)
    editbtn.size_hint_align_set(-1.0, 0.0)
  bottombox.pack_end(editbtn)


  backbtn = elementary.Button(bottombox)
  backbtn.text_set(_("Back"))
  backbtn.show()
  backbtn._callback_add('clicked', partial(pager_pop, pager))
  bottombox.pack_end(backbtn)

  scr = elementary.Scroller(box)
  scr.bounce_set(0, 0)
  scr.content_min_limit(0,1)
  scr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_AUTO)
  scr.size_hint_weight_set(1.0, -1.0)
  scr.size_hint_align_set(-1.0, -1.0)

  headerframe = elementary.Frame(scr)
  headerframe.style_set('pad_small')
  headerframe.show()
  headerframe.size_hint_weight_set(1.0, 1.0)
  headerframe.size_hint_align_set(0.5, -1.0)

  scrbox = elementary.Box(scr)
  scrbox.size_hint_weight_set(1.0, 0.0)
  scrbox.size_hint_align_set(-1.0, 0.0)
  scrbox.show()

  header = elementary.Box(scrbox)
  header.horizontal_set(True)
  header.show()
  header.size_hint_weight_set(1.0, 0.0)
#  header.size_hint_align_set(0.5, -1.0)
  headerframe.content_set(header)
#  scrbox.pack_start(headerframe)

  photo = elementary.Photo(header)
  photo.size_hint_align_set(0.5, -1.0)
  header.pack_start(photo)
  photo.show()

  infofr = elementary.Frame(header)
  infofr.size_hint_weight_set(1.0, 0.0)
#  infofr.size_hint_align_set(-1.0, -1.0)
  infofr.show()
  infofr.style_set('pad_small')
  header.pack_end(infofr)

  info = elementary.Box(infofr)
  info.show()
  infofr.content_set(info)

  if 'Photo' in data:
    photo.file_set(data['Photo'])

  if data.get('Name'):
    label = elementary.Label(info)
    name = data['Name']
    if data.get('Surname'):
      name += ' ' + data['Surname']
    label.text_set('<b>'+elementary.Entry.utf8_to_markup(name)+'</b>')
    label.show()
    label.size_hint_align_set(-1.0, 0.0)
    info.pack_start(label)

  if data.get('Nickname'):
    nicks = data['Nickname']
    if not isinstance(nicks, dbus.Array):
      nicks = [nicks]
    for nick in nicks:
      label = elementary.Label(info)
      label.text_set('<i>'+elementary.Entry.utf8_to_markup(nick)+'</i>')
      label.show()
      label.size_hint_align_set(-1.0, 0.0)
      info.pack_end(label)

  header_fields = ['Phone','E-mail']
  icons = {'phonenumber':'phonecall','email':'sent'}

  for field in header_fields:
    if data.get(field):
      values = data[field]
      if type(values)!=dbus.Array:
        values = [values]
      for value in values:
        ibox = elementary.Box(info)
        ibox.horizontal_set(True)
        ibox.size_hint_align_set(-1.0, 0.0)
        ibox.size_hint_weight_set(-1.0, 0.0)
        ibox.show()
        if field_type(field) in icons:
          icon = elementary.Icon(ibox)
          icon.file_set("/usr/share/pixmaps/opimd-utils/"+icons[field_type(field)]+".png")
          icon.size_hint_min_set(32,32)
          icon.size_hint_align_set(-1.0, 0.0)
          icon.show()
          ibox.pack_start(icon)
        label = elementary.Label(info)
        label.text_set(' '+elementary.Entry.utf8_to_markup(str(value)))
        label.show()
        label.size_hint_align_set(-1.0, 0.0)
        label.size_hint_weight_set(1.0, 0.0)
        ibox.pack_end(label)
        info.pack_end(ibox)

  tablefr = elementary.Frame(win)
  tablefr.show()
  tablefr.size_hint_align_set(-1.0, 0.0)
  tablefr.size_hint_weight_set(1.0, 0.0)
  tablefr.style_set('pad_small')

  table = elementary.Table(win)
  table.show()
  table.size_hint_align_set(-1.0, 0.0)
  table.size_hint_weight_set(-1.0, 0.0)
  tablefr.content_set(table)
  scrbox.pack_end(tablefr)

  i=0
  for field in data:
    if not field in header_fields and not field in ('Name','Surname','Nickname','Path','EntryId','Photo'):
      values = data[field]
      if type(values)!=dbus.Array:
        values = [values]
      lafield = elementary.Label(win)
      lafield.show()
      lafield.text_set(elementary.Entry.utf8_to_markup(field) + ':')
      lafield.size_hint_align_set(-1.0, 0.0)

      table.pack(lafield, 0, i, 1, 1)

      for value in values:
        lavalue = elementary.Label(win)
        lavalue.show()

        valuebox = elementary.Box(win)
        valuebox.horizontal_set(True)
        valuebox.show()
        valuebox.size_hint_align_set(1.0, 0.0)
        valuebox.size_hint_weight_set(1.0, 0.0)


        for prefix in icons:
          if field_type(field)==prefix:
            icon = elementary.Icon(win)
            icon.file_set("/usr/share/pixmaps/opimd-utils/"+icons[prefix]+".png")
            icon.size_hint_min_set(32, 32)
            icon.show()
            valuebox.pack_end(icon)
            break

        lavalue.text_set(elementary.Entry.utf8_to_markup(str(value))+' ')
        lavalue.size_hint_align_set(1.0, 0.0)

        valuebox.pack_start(lavalue)
        table.pack(valuebox, 1, i, 1, 1)
        i += 1

  wrapper = elementary.Frame(win)
  wrapper.style_set('outdent_top')
  wrapper.content_set(scrbox)
  wrapper.size_hint_weight_set(1.0, 0.0)
  wrapper.size_hint_align_set(-1.0, 0.0)
  wrapper.show()

  scr.content_set(header)
  scr.show()

#  tb = elementary.Toolbar(win)
#  tb.size_hint_weight_set(0, 0)
#  tb.size_hint_align_set(-1.0, -1.0)

#  det = tb.item_add(elementary.Photo(tb), 'Data', None)
#  det.select()
#  his = tb.item_add(None, 'History', None)

#  tb.show()

  scr2 = elementary.Scroller(box)
  scr2.bounce_set(0, 0)
#  scr2.policy_set(elementary.ELM_SCROLLER_POLICY_AUTO, elementary.ELM_SCROLLER_POLICY_AUTO)
  scr2.size_hint_weight_set(1.0, 1.0)
  scr2.size_hint_align_set(-1.0, -1.0)

  scr2.content_set(wrapper)
  scr2.show()
  box.pack_start(scr2)
#  box.pack_start(tb)
  box.pack_start(scr)

def make_downbox():
  global downbox
  downbox = elementary.Box(win)
  downbox.show()
  downbox.size_hint_weight_set(1.0, 0.0)
  downbox.size_hint_align_set(-1.0, 0.0)
  downbox.horizontal_set(True)
  mainbox.pack_end(downbox)

  searchbtn = elementary.Button(win)
  searchbtn.text_set(_("Search"))
  downbox.pack_start(searchbtn)
  searchbtn.size_hint_weight_set(1.0, 0.0)
  searchbtn.size_hint_align_set(-1.0, 0.0)
  searchbtn._callback_add('clicked', partial(search, downbox))
  searchbtn.show()

  newbtn = elementary.Button(win)
  newbtn.text_set(_("New"))
  newbtn._callback_add('clicked', partial(edit_contact, None))
  downbox.pack_end(newbtn)
  newbtn.size_hint_align_set(-1.0, 0.0)
  newbtn.show()

  exitbtn = elementary.Button(win)
  exitbtn.text_set(_("Close"))
  downbox.pack_end(exitbtn)
  exitbtn.show()
  exitbtn.size_hint_align_set(-1.0, 0.0)
  exitbtn._callback_add('clicked', destroy)

make_downbox()

win.show()

display_contacts(list)

elementary.run()
elementary.shutdown()

if query:
  query.Dispose()

#print "bye"
