#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dbus, e_dbus
from sys import argv
from functools import partial
from opimd_utils import opimd_reply
from re import escape
from ecore import timer_add
import elementary

# define some nice dbus helper, which I really like, cause make code easier to read :)
def getDbusObject (bus, busname , objectpath , interface):
        dbusObject = bus.get_object(busname, objectpath)
        return dbus.Interface(dbusObject, dbus_interface=interface)

bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())

contacts = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Contacts", "org.freesmartphone.PIM.Contacts")

query = None

elementary.init()

elementary.c_elementary.finger_size_set(80)
#elementary.c_elementary.scale_set(1.0)

def dbus_ok(*args, **kwargs):
  pass

def dbus_error(x):
  print "dbus error: " + str(x)

def destroy(win, event, *args, **kargs):
#  print "kabum"
  elementary.exit()

win = elementary.Window("opimd-contacts", 0)
win.title_set("Contacts")

bg = elementary.Background(win)
win.resize_object_add(bg)
bg.show()

pager = elementary.Pager(win)
win.resize_object_add(pager)
pager.show()

mainbox = elementary.Box(win)
mainbox.show()
pager.content_push(mainbox)

win.destroy = destroy

def sanity_name(name):
  result = '^'
  name = name.decode('utf-8')
  for char in name:
    if char!='\n':
      lower = char.lower()
      upper = char.upper()
      if lower!=upper:
        result += '['+escape(char.upper()+char.lower())+']'
      else:
        result += escape(char)
#  print result
  return result

def query_contacts_query_handler(callback, x=None, *args, **kwargs):
  if kwargs.get('query'):
    query = kwargs['query']
    dbus_err = dbus_ok
  else:
    query = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.ContactQuery")
    dbus_err = dbus_error

  #num = query.GetResultCount()

  query.GetMultipleResults(6, reply_handler=partial(callback, query=query, next=kwargs.get('next'), dontdispose=kwargs.get('dontdispose')), error_handler=dbus_err)

  if not kwargs.get('dontdispose'):
    query.Dispose(reply_handler=dbus_ok, error_handler=dbus_err)

def query_contacts(callback, name = None, que = None):
  if name:
    name = sanity_name(name)
    dict = {'Name':name, '_limit':3}
    dispose = False
  else:
    dict = {'_sortby':'Name'}
    dispose = True
  if not que:
    contacts.Query(dict, reply_handler=partial(query_contacts_query_handler, callback, dontdispose=dispose), error_handler=dbus_error)
    global query
    if query:
      query.Dispose(reply_handler=dbus_ok, error_handler=dbus_error)
      query = None
  else:
    query_contacts_query_handler(callback, dontdispose=True, query=que, next=True)

list = elementary.List(win)
list.size_hint_align_set(-1.0, -1.0)
list.size_hint_weight_set(1.0, 1.0)
mainbox.pack_start(list)
list.show()

def display_contacts(list, name = None):
  loading = elementary.InnerWindow(win)
  win.resize_object_add(loading)
  loading.show()
  loading.style_set('minimal')
  label = elementary.Label(loading)
  label.scale_set(2.0)
  loading.content_set(label)
  label.label_set('Searching...')
  label.show()
  loading.show()
  query_contacts(partial(display_contacts_callback, loading), name)

def display_contacts_callback(loading, contact_list, *args, **kwargs):
  if not kwargs.get('next'):
    list.clear()
  for contact in contact_list:
#    print contact['Path']
    photo = elementary.Photo(list)
    photo.scale_set(0.9) 
    name = contact.get('Name')
    if not name:
      name = contact.get('Phone')
      if not name:
        name = contact.get('E-mail')
        if not name:
          name = '<???>'
    if isinstance(name, dbus.Array):
      name = name[0]
    callbtn = None
    if check_contact(contact, 'Phone'):
      callbtn = elementary.Button(list)
      callbtn.label_set('Call')
      callbtn.show()
      callbtn.clicked = partial(select_field, contact, 'Phone', 'tel:', call)
    list.item_append(name, photo, callbtn, partial(display_contact, contact['Path'], data=contact))
  list.go()
  if loading:
    loading.delete()
  if kwargs.get('query'):
    if kwargs.get('next'):
      global query
      query = kwargs.get('query')
    if len(contact_list)>0:
      query_contacts(partial(display_contacts_callback, None), None, kwargs['query'])
#  elif kwargs.get('query') and kwargs.get('next'):
#    kwargs['query'].Dispose(reply_handler=dbus_ok, error_handler=dbus_error)

def search_changed(frame, obj, *args, **kwargs):
  text = obj.markup_to_utf8(obj.entry_get())
  if text[len(text)-2:]=="\n\n":
    obj.delete()
    close_search(frame)
  else:
    display_contacts(list, text)

def close_search(frame, *args, **kwargs):
  frame.delete()
  del frame
  display_contacts(list)
  make_downbox()

def nothing(*args, **kwargs):
  print "nothing called"

def search(downbox, obj, *args, **kwargs):
  frame = elementary.Frame(win)
  frame.label_set('Type name to search...')
  frame.show()
  frame.size_hint_weight_set(1.0, 0.0)
  frame.size_hint_align_set(-1.0, -1.0)

  entryscr = elementary.Scroller(win)
  entryscr.content_min_limit(0,1)
  entryscr.bounce_set(0, 0)
  entryscr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_OFF)
  entryscr.size_hint_weight_set(1.0, 0.0)
  entryscr.size_hint_align_set(-1.0, -1.0)
  entry = elementary.Entry(win)
  entry.show()
  entry.size_hint_weight_set(1.0, 0.0)
  entry.size_hint_align_set(-1.0, -1.0)
#  entry.single_line_set(True)
  entryscr.content_set(entry)
  entryscr.show()

  entry.focus()

  entry._callback_add('changed', partial(search_changed, frame))

  downbox.delete()

  frame.content_set(entryscr)

  mainbox.pack_start(frame)
  obj.clicked = nothing

def pager_pop(pager, *args, **kwargs):
  pager.content_pop()

def inwin_close(dia, *args, **kwargs):
  if kwargs.get('callback'):
    kwargs['callback']()
  dia.hide()
  dia.delete()
  return False

def ussd_ok(dia, *args, **kwargs):
  dia.delete()

def ussd_error(dia, label, x, *args, **kwargs):
  label.label_set('Error while sending USSD request!')
  timer_add(3, partial(inwin_close, dia))
  print str(x)

def call(to, *args, **kwargs):
  #print "calling to "+to
  if to[:4]=='tel:':
    to = to[4:]
    if to[len(to)-1]=='#' or len(to)<=2:
      dia = elementary.InnerWindow(win)
      win.resize_object_add(dia)
      dia.activate()
      dia.show()
      dia.style_set('minimal')
      label = elementary.Label(win)
      label.label_set('Sending USSD request...')
      label.show()
      dia.content_set(label)
      network = getDbusObject (bus, "org.freesmartphone.ogsmd", "/org/freesmartphone/GSM/Device", "org.freesmartphone.GSM.Network")
      network.SendUssdRequest(to, reply_handler=partial(ussd_ok, dia), error_handler=partial(ussd_error, dia, label))
    else:
      call = getDbusObject (bus, "org.freesmartphone.ogsmd", "/org/freesmartphone/GSM/Device", "org.freesmartphone.GSM.Call")
      call.Initiate(to, 'voice', reply_handler=dbus_ok, error_handler=dbus_error)

def mail(to, *args, **kwargs):
  #print "mailing to "+to
  dia = elementary.InnerWindow(win)
  win.resize_object_add(dia)
  dia.show()
  dia.style_set('minimal')
  label = elementary.Label(win)
  label.label_set('Not yet implemented')
  label.show()
  dia.content_set(label)
  dia.activate()
  timer_add(3, partial(inwin_close, dia))

def sms_status(dia, icon, label, status):
  if status=='storing':
    dia.show()
    dia.activate()
  elif status=='error':
    dia.hide()
  elif status=='sent':
    label.label_set('Message sent!')
    timer_add(3, partial(inwin_close, dia))
  elif status=='cancelled':
    dia.delete()

def sms(to, *args, **kwargs):
  #print "smsing to " + kwargs['contact']['Name'] + ' ' + to
  dia = elementary.InnerWindow(win)
  win.resize_object_add(dia)
  dia.style_set('minimal')
  label = elementary.Label(dia)
  label.label_set('Sending...')
  label.show()
  dia.content_set(label)
  opimd_reply.reply([to, kwargs['contact']['Name']], '', bus, win, None, None, partial(sms_status, dia, None, label))

def select_field(contact, fieldname, prefix, callback, *args, **kwargs):
  result=[]
  for field in contact:
    if field.lower().endswith(fieldname.lower()):
      if not isinstance(contact[field], dbus.Array):
        values = [contact[field]]
      else:
        values = contact[field]
      for value in values:
        result.append((field,value))

  if len(result)==1:
    callback(result[0][1], contact=contact)
  else:
    dia = elementary.InnerWindow(win)
    win.resize_object_add(dia)
    dia.activate()
    dia.show()

    box = elementary.Box(win)
    box.show()

    dia.content_set(box)

    list = elementary.List(win)
    list.show()
    box.pack_start(list)
    list.size_hint_weight_set(1.0, 1.0)
    list.size_hint_align_set(-1.0, -1.0)

    for res in result:
      if res[1][:len(prefix)]==prefix:
        display = res[1][len(prefix):]
      else:
        display = res[1]

      list.item_append(res[0]+': '+display, None, None, partial(inwin_close, dia, callback=partial(callback, res[1], contact=contact)))

    list.go()

    btn = elementary.Button(win)
    btn.label_set('Close')
    btn.size_hint_weight_set(-1.0, 0.0)
    btn.size_hint_align_set(-1.0, 0.0)
    btn.show()
    btn.clicked = partial(inwin_close, dia)

    box.pack_end(btn)

def check_contact(contact, fieldname):
  for field in contact:
    if field.lower().endswith(fieldname.lower()):
      return True
  return False

def save_contact(path, data, *args, **kwargs):
  pager.content_pop()
  if path:
    display_contact(path)

def edit_contact(path, *args, **kwargs):
  if path:
    if not kwargs.get('data'):
      contact = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
      data = contact.GetContent()
    else:
      data = kwargs['data']
    pager.content_pop()

  box = elementary.Box(win)
  pager.content_push(box)

  dia = elementary.InnerWindow(win)
  win.resize_object_add(dia)
  dia.show()
  dia.style_set('minimal')
  label = elementary.Label(win)
  label.label_set('Not yet implemented')
  label.show()
  dia.content_set(label)
  dia.activate()
  timer_add(3, partial(inwin_close, dia, callback=partial(save_contact, path, None)))


def display_contact(path, *args, **kwargs):
#  print "displaying " + path
  if not kwargs.get('data'):
    contact = getDbusObject (bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM.Contact")
    data = contact.GetContent()
  else:
    data = kwargs['data']

  box = elementary.Box(win)
  box.show()
  pager.content_push(box)

  bottombox = elementary.Box(win)
  bottombox.size_hint_weight_set(1.0, 0.0)
  bottombox.size_hint_align_set(-1.0, 0.0)
  bottombox.horizontal_set(True)
  bottombox.show()
  box.pack_end(bottombox)

  isphone = check_contact(data, 'Phone')
  ismail = check_contact(data, 'E-mail')

  if isphone or ismail:
    hover = elementary.Hoversel(win)
    hover.hover_parent_set(pager)
    hover.label_set('Actions')
    bottombox.pack_end(hover)
    hover.size_hint_weight_set(1.0, 0.0)
    hover.size_hint_align_set(-1.0, 0.0)
    hover.scale_set(1.0)
    hover.show()

  if isphone:
    hover.item_add('Call',"arrow_down",
                elementary.ELM_ICON_STANDARD,partial(select_field,data, 'Phone', 'tel:', call))
    hover.item_add('SMS',"arrow_down",
                elementary.ELM_ICON_STANDARD,partial(select_field,data, 'Phone', 'tel:', sms))

  if ismail:
    hover.item_add('E-mail',"arrow_down",
                elementary.ELM_ICON_STANDARD,partial(select_field,data, 'E-mail', 'mail:', mail))

  editbtn = elementary.Button(bottombox)
  editbtn.label_set('Edit')
  editbtn.show()
  editbtn.clicked = partial(edit_contact, path, data=data)
  if not (isphone or ismail):
    editbtn.size_hint_weight_set(1.0, 0.0)
    editbtn.size_hint_align_set(-1.0, 0.0)
  bottombox.pack_end(editbtn)


  backbtn = elementary.Button(bottombox)
  backbtn.label_set('Back')
  backbtn.show()
  backbtn.clicked = partial(pager_pop, pager)
  bottombox.pack_end(backbtn)

  scr = elementary.Scroller(box)
  scr.bounce_set(0, 0)
  scr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_AUTO)
  scr.size_hint_weight_set(1.0, 1.0)
  scr.size_hint_align_set(-1.0, -1.0)

  headerframe = elementary.Frame(scr)
  headerframe.style_set('pad_small')
  headerframe.show()
  headerframe.size_hint_weight_set(1.0, 1.0)
  headerframe.size_hint_align_set(-1.0, -1.0)

  scrbox = elementary.Box(scr)
  scrbox.size_hint_weight_set(1.0, 0.0)
  scrbox.size_hint_align_set(-1.0, 0.0)
  scrbox.show()

  header = elementary.Box(scrbox)
  header.horizontal_set(True)
  header.show()
  headerframe.content_set(header)
  scrbox.pack_start(headerframe)

  photo = elementary.Photo(header)
  header.pack_start(photo)
  photo.show()

  infofr = elementary.Frame(header)
  infofr.show()
  infofr.style_set('pad_small')
  header.pack_end(infofr)

  info = elementary.Box(infofr)
  info.show()
  infofr.content_set(info)

  if data.get('Name'):
    label = elementary.Label(info)
    label.label_set('<b>'+elementary.Entry.utf8_to_markup(str(data['Name']))+'</b>')
    label.show()
    label.size_hint_align_set(-1.0, 0.0)
    info.pack_start(label)

  header_fields = {'Phone':'tel:','E-mail':'mail:'}
  icons = {'tel:':'phonecall','mail:':'sent'}

  for field in header_fields:
    if data.get(field):
      values = data[field]
      if type(values)!=dbus.Array:
        values = [values]
      for value in values:
        ibox = elementary.Box(info)
        ibox.horizontal_set(True)
        ibox.size_hint_align_set(-1.0, 0.0)
        ibox.size_hint_weight_set(-1.0, 0.0)
        ibox.show()
        if value[:len(header_fields[field])]==header_fields[field]:
          value = value[len(header_fields[field]):]
          if header_fields[field] in icons:
            icon = elementary.Icon(ibox)
            icon.file_set("/usr/share/pixmaps/opimd-utils/"+icons[header_fields[field]]+".png")
            icon.size_hint_min_set(32,32)
            icon.size_hint_align_set(-1.0, 0.0)
            icon.show()
            ibox.pack_start(icon)
        label = elementary.Label(info)
        label.label_set(' '+elementary.Entry.utf8_to_markup(str(value)))
        label.show()
        label.size_hint_align_set(-1.0, 0.0)
        label.size_hint_weight_set(1.0, 0.0)
        ibox.pack_end(label)
        info.pack_end(ibox)

  tablefr = elementary.Frame(win)
  tablefr.show()
  tablefr.size_hint_align_set(-1.0, 0.0)
  tablefr.size_hint_weight_set(1.0, 0.0)
  tablefr.style_set('pad_small')

  table = elementary.Table(win)
  table.show()
  table.size_hint_align_set(-1.0, 0.0)
  table.size_hint_weight_set(-1.0, 0.0)
  tablefr.content_set(table)
  scrbox.pack_end(tablefr)

  i=0
  for field in data:
    if not field in header_fields and not field in ('Name','Path'):
      values = data[field]
      if type(values)!=dbus.Array:
        values = [values]
      lafield = elementary.Label(win)
      lafield.show()
      lafield.label_set(elementary.Entry.utf8_to_markup(field) + ':')
      lafield.size_hint_align_set(-1.0, 0.0)

      table.pack(lafield, 0, i, 1, 1)

      for value in values:
        lavalue = elementary.Label(win)
        lavalue.show()

        valuebox = elementary.Box(win)
        valuebox.horizontal_set(True)
        valuebox.show()
        valuebox.size_hint_align_set(1.0, 0.0)
        valuebox.size_hint_weight_set(1.0, 0.0)


        for prefix in icons:
          if value[:len(prefix)]==prefix:
            value = value[len(prefix):]
            icon = elementary.Icon(win)
            icon.file_set("/usr/share/pixmaps/opimd-utils/"+icons[prefix]+".png")
            icon.size_hint_min_set(32, 32)
            icon.show()
            valuebox.pack_end(icon)
            break

        lavalue.label_set(elementary.Entry.utf8_to_markup(str(value))+' ')
        lavalue.size_hint_align_set(1.0, 0.0)

        valuebox.pack_start(lavalue)
        table.pack(valuebox, 1, i, 1, 1)
        i += 1

  wrapper = elementary.Frame(win)
  wrapper.style_set('outdent_top')
  wrapper.content_set(scrbox)
  wrapper.size_hint_weight_set(1.0, 0.0)
  wrapper.size_hint_align_set(-1.0, 0.0)
  wrapper.show()

  scr.content_set(wrapper)
  scr.show()

  box.pack_start(scr)

def make_downbox():
  global downbox
  downbox = elementary.Box(win)
  downbox.show()
  downbox.size_hint_weight_set(1.0, 0.0)
  downbox.size_hint_align_set(-1.0, 0.0)
  downbox.horizontal_set(True)
  mainbox.pack_end(downbox)

  searchbtn = elementary.Button(win)
  searchbtn.label_set('Search')
  downbox.pack_start(searchbtn)
  searchbtn.size_hint_weight_set(1.0, 0.0)
  searchbtn.size_hint_align_set(-1.0, 0.0)
  searchbtn.clicked = partial(search, downbox)
  searchbtn.show()

  newbtn = elementary.Button(win)
  newbtn.label_set('New')
  newbtn.clicked = partial(edit_contact, None)
  downbox.pack_end(newbtn)
  newbtn.size_hint_align_set(-1.0, 0.0)
  newbtn.show()

  exitbtn = elementary.Button(win)
  exitbtn.label_set('Close')
  downbox.pack_end(exitbtn)
  exitbtn.show()
  exitbtn.size_hint_align_set(-1.0, 0.0)
  exitbtn.clicked = destroy

make_downbox()

win.show()

display_contacts(list)

elementary.run()
elementary.shutdown()

if query:
  query.Dispose()

#print "bye"
