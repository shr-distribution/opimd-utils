#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dbus, e_dbus
from sys import argv
from functools import partial
from opimd_utils import opimd_reply
from re import escape
import elementary

# define some nice dbus helper, which I really like, cause make code easier to read :)
def getDbusObject (bus, busname , objectpath , interface):
        dbusObject = bus.get_object(busname, objectpath)
        return dbus.Interface(dbusObject, dbus_interface=interface)

bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())

contacts = getDbusObject (bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/Contacts", "org.freesmartphone.PIM.Contacts")

elementary.init()

elementary.c_elementary.finger_size_set(80)
#elementary.c_elementary.scale_set(1.0)

def dbus_ok(*args, **kwargs):
  pass

def dbus_error(x):
  print "dbus error: " + str(x)

def destroy(win, event, *args, **kargs):
  print "kabum"
  elementary.exit()

win = elementary.Window("opimd-contacts", 0)
win.title_set("opimd Contacts")

bg = elementary.Background(win)
win.resize_object_add(bg)
bg.show()

pager = elementary.Pager(win)
win.resize_object_add(pager)
pager.show()

mainbox = elementary.Box(win)
mainbox.show()
pager.content_push(mainbox)

win.destroy = destroy

def sanity_name(name):
  result = '^'
  name = name.decode('utf-8')
  for char in name:
    if char!='\n':
      lower = char.lower()
      upper = char.upper()
      if lower!=upper:
        result += '['+escape(char.upper()+char.lower())+']'
      else:
        result += escape(char)
#  print result
  return result

def query_contacts_query_handler(callback, x, *args, **kwargs):
  query = getDbusObject (bus, "org.freesmartphone.opimd", x, "org.freesmartphone.PIM.ContactQuery")

  #num = query.GetResultCount()

  query.GetMultipleResults(20, reply_handler=callback, error_handler=dbus_error)

  if not kwargs.get('dontdispose'):
    query.Dispose(reply_handler=dbus_ok, error_handler=dbus_error)

def query_contacts(callback, name = None):
  if name:
    name = sanity_name(name)
    dict = {'Name':name, '_limit':3}
    dispose = False
  else:
    dict = {'_sortby':'Name'}
    dispose = True
  contacts.Query(dict, reply_handler=partial(query_contacts_query_handler, callback, dontdispose=dispose), error_handler=dbus_error)

list = elementary.List(win)
list.size_hint_align_set(-1.0, -1.0)
list.size_hint_weight_set(1.0, 1.0)
mainbox.pack_start(list)
list.show()

def display_contacts(list, name = None):
  loading = elementary.InnerWindow(win)
  win.resize_object_add(loading)
  loading.show()
  loading.style_set('minimal')
  label = elementary.Label(loading)
  label.scale_set(2.0)
  loading.content_set(label)
  label.label_set('Searching...')
  label.show()
  loading.show()
  query_contacts(partial(display_contacts_callback, loading), name)

def display_contacts_callback(loading, contact_list):
  list.clear()
  for contact in contact_list:
#    print contact['Path']
    photo = elementary.Photo(list)
    photo.scale_set(0.9) 
    name = contact.get('Name')
    if not name:
      name = contact.get('Phone')
      if not name:
        name = contact.get('E-mail')
        if not name:
          name = '<???>'
    list.item_append(name, photo, None, partial(display_contact, contact['Path'], contact))
  list.go()
  if loading:
    loading.delete()

def search_changed(frame, obj, *args, **kwargs):
  text = obj.markup_to_utf8(obj.entry_get())
  if text[len(text)-2:]=="\n\n":
    obj.delete()
    close_search(frame)
  else:
    display_contacts(list, text)

def close_search(frame, *args, **kwargs):
  frame.delete()
  del frame
  display_contacts(list)
  make_downbox()

def nothing(*args, **kwargs):
  print "nothing called"

def search(downbox, obj, *args, **kwargs):
  frame = elementary.Frame(win)
  frame.label_set('Type name to search...')
  frame.show()
  frame.size_hint_weight_set(1.0, 0.0)
  frame.size_hint_align_set(-1.0, -1.0)

  entryscr = elementary.Scroller(win)
  entryscr.content_min_limit(0,1)
  entryscr.bounce_set(0, 0)
  entryscr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_OFF)
  entryscr.size_hint_weight_set(1.0, 0.0)
  entryscr.size_hint_align_set(-1.0, -1.0)
  entry = elementary.Entry(win)
  entry.show()
  entry.size_hint_weight_set(1.0, 0.0)
  entry.size_hint_align_set(-1.0, -1.0)
#  entry.single_line_set(True)
  entryscr.content_set(entry)
  entryscr.show()

  entry.focus()

  entry._callback_add('changed', partial(search_changed, frame))

  downbox.delete()

  frame.content_set(entryscr)

  mainbox.pack_start(frame)
  obj.clicked = nothing

def pager_pop(pager, *args, **kwargs):
  pager.content_pop()

def display_contact(path, data = None, *args, **kwargs):
  print "displaying " + path
  box = elementary.Box(pager)
  box.show()
  pager.content_push(box)

  backbtn = elementary.Button(box)
  backbtn.label_set('Back')
  backbtn.show()
  backbtn.clicked = partial(pager_pop, pager)
  box.pack_start(backbtn)

  scr = elementary.Scroller(box)
#  scr.content_min_limit(0,1)
  scr.bounce_set(0, 0)
  scr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_AUTO)
  scr.size_hint_weight_set(1.0, 1.0)
  scr.size_hint_align_set(-1.0, -1.0)

  scrbox = elementary.Box(scr)

  header = elementary.Box(scrbox)


#  entry.size_hint_weight_set(1.0, 1.0)
#  entry.size_hint_align_set(-1.0, -1.0)

  scr.content_set(scrbox)
  scr.show()

  box.pack_start(scr)

def make_downbox():
  global downbox
  downbox = elementary.Box(win)
  downbox.show()
  downbox.size_hint_weight_set(1.0, 0.0)
  downbox.size_hint_align_set(-1.0, 0.0)
  downbox.horizontal_set(True)
  mainbox.pack_end(downbox)

  searchbtn = elementary.Button(win)
  searchbtn.label_set('Search')
  downbox.pack_start(searchbtn)
  searchbtn.size_hint_weight_set(1.0, 0.0)
  searchbtn.size_hint_align_set(-1.0, 0.0)
  searchbtn.clicked = partial(search, downbox)
  searchbtn.show()

  exitbtn = elementary.Button(win)
  exitbtn.label_set('Close')
  downbox.pack_end(exitbtn)
  exitbtn.show()
  exitbtn.size_hint_align_set(-1.0, 0.0)
  exitbtn.clicked = destroy

make_downbox()

win.show()

display_contacts(list)

elementary.run()
elementary.shutdown()

print "bye"
