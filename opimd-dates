#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
opimd-dates

(C) 2009 Thomas Zimmermann <zimmermann@vdm-design.de>
GPLv2 or later

Simple calendar app using opimd-dates domain
"""

import elementary, ecore
import gettext
import calendar
import datetime
import time
import e_dbus, dbus

try:
	cat = gettext.Catalog("opimd-dates")
	_ = cat.gettext
except IOError:
	_ = lambda x: x

# names of the months
month_strings = [ _("January"), _("February"), _("March"), _("April"), _("May"), _("June"), _("July"), _("August"), _("September"), _("October"), _("November"), _("December") ]
# shortnames of the days
day_names = [ _("Mon"), _("Tue"), _("Wed"), _("Thu"), _("Fri"), _("Sat"), _("Sun")  ]



class Opimd:
	""" A python singleton """

	class __impl:
		""" Implementation of the singleton interface """

		def __init__(self, domain = "Dates"):
			self.bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())
			self.dates = self.getDbusObject (self.bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/"+domain, "org.freesmartphone.PIM."+domain)
			self.querypath = "org.freesmartphone.PIM."+domain[:-1]+"Query"
			self.domain = domain

		# define some nice dbus helper, which I really like, cause make code easier to read :)
		def getDbusObject (self, bus, busname , objectpath , interface):
			dbusObject = self.bus.get_object(busname, objectpath)
			return dbus.Interface(dbusObject, dbus_interface=interface)

		def dbus_ok(self, *args, **kwargs):
			pass

		def dbus_err(self, x): 
			print "dbus error: " + str(x)

		def query(self, q):
			x = self.dates.Query(q)
			query = self.getDbusObject (self.bus, "org.freesmartphone.opimd", x, self.querypath)
			results = query.GetMultipleResults(query.GetResultCount())
			query.Dispose(reply_handler = self.dbus_ok, error_handler = self.dbus_err)
			return results

		def add(self, dic):
			self.dates.Add(dic)

		def get(self, path):
			return self.getDbusObject (self.bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM."+self.domain[:-1])

		def delete(self, path):
			obj = self.getDbusObject (self.bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM."+self.domain[:-1])
			obj.Delete()

	# storage for the instance reference
	__instance = None

	def __init__(self, domain):
		""" Create singleton instance """
		# Check whether we already have an instance
		if Opimd.__instance is None:
			# Create and remember instance
			Opimd.__instance = Opimd.__impl(domain)

		# Store instance reference as the only member in the handle
		self.__dict__['_Singleton__instance'] = Opimd.__instance

	def __getattr__(self, attr):
		""" Delegate access to implementation """
		return getattr(self.__instance, attr)

	def __setattr__(self, attr, value):
		""" Delegate access to implementation """
		return setattr(self.__instance, attr, value)



class MainWindow:

	def destroy(self, obj, *args, **kargs):
		elementary.exit()


	def __init__(self):
		elementary.init()
#		elementary.c_elementary.finger_size_set(35)
		self.win = elementary.Window("opimd-dates", elementary.ELM_WIN_BASIC)
		self.win.title_set(_("Dates"))
		self.win.callback_delete_request_add(self.destroy)

		# add background to main window
		bg = elementary.Background(self.win)
		self.win.resize_object_add(bg)
		bg.size_hint_weight_set(1.0, 1.0)
		bg.show()

		# main container contains the calendar and the Quit button
		self.mainbox = elementary.Box(self.win)
		self.mainbox.size_hint_weight_set(1.0, 1.0)
		self.win.resize_object_add(self.mainbox)
		self.mainbox.show()

		# calendar
		today = datetime.date.today()
		self.cal = CalendarMonth(self)
		self.mainbox.pack_start(self.cal)
		self.cal.show(today.year,today.month)

		# show main window
		self.win.show()



class CalendarMonth(elementary.Table):

	# sets first day of the week
	firstweekday = calendar.MONDAY


	def __init__(self,mainwin):
		elementary.Table.__init__(self,mainwin.mainbox)
		self.mainwin = mainwin
		self.size_hint_align_set(-1.0, 0.0)
		self.size_hint_weight_set(1.0, 1.0)
		# set table homogenous
		self.homogenous_set(True)
		self.calobj = calendar.Calendar(self.firstweekday)


	def setfirstweekday(weekday):
		self.firstweekday = weekday
		self.calobj = calendar.Calendar(self.firstweekday)


	def show(self,year,month):
		elementary.Table.show(self)
		row = 0

		# calculate previus month
		if month <= 1:
			prevyear = year - 1
			prevmonth = 12
		else:
			prevyear = year
			prevmonth = month - 1

		# previus month button
		prevbt = elementary.Button(self)
		prevbt._callback_add("clicked", self.show_month, prevyear, prevmonth)
		prevbt.text_set("< ")        
		prevbt.show()                                    
		self.pack(prevbt,row,0,1,1)

		# put month and year in first row
		title_label = elementary.Label(self)
		self.pack(title_label,1,row,5,1)
		title_label.show()
		title_label.text_set( month_strings[ month-1 ] + " " + str(year) )

		# calculate next month
		if month >= 12:
			nextyear = year + 1
			nextmonth = 1
		else:
			nextyear = year
			nextmonth = month + 1

		# next month button
		nextbt = elementary.Button(self)
		nextbt._callback_add("clicked", self.show_month, nextyear, nextmonth)    
		nextbt.text_set(" >")                                
		nextbt.show()                                    
		self.pack(nextbt,6,row,1,1)

		# put day names in second row
		row += 1
		for e in range(0,7):
			l = elementary.Label(self)
			l.text_set(day_names[e])
			l.size_hint_align_set(0.5,0.5)
			l.show()
			l.scale_set(1)
			self.pack(l,e,row,1,1)

		today = datetime.date.today()
		begin_month = datetime.date(year,month,1)
		if month == 12:
			end_month = datetime.date(year+1,1,1)
		else:
			end_month = datetime.date(year,month+1,1)

		opimd = Opimd("Dates")
		results = opimd.query({'>Begin':(time.mktime(begin_month.timetuple())-604800), '<End':(time.mktime(end_month.timetuple())+604800)})

		# fill rows 3 to 8 with days
		for week in self.calobj.monthdays2calendar(year, month):
			row += 1
			for (day,weekday) in week:
				if day > 0:
					bt = elementary.Button(self)
					bt.size_hint_weight_set(1.0, 1.0)
					#bt.size_hint_align_set(0.5, 0.5)
					bt._callback_add("clicked", self.show_day, year, month, day)
					bt.text_set( str( day ) )
					bt.show()
					self.pack(bt,weekday,row,1,1)

					# check for dates at this day, if there are mark yellow 
					date = datetime.datetime(year, month, day)
					begin_day = date
					end_day = date + datetime.timedelta(hours=24)
					for i in results:
						end = datetime.datetime.fromtimestamp(float(i['End']))
						begin = datetime.datetime.fromtimestamp(float(i['Begin']))
						if (end <= end_day and begin >= begin_day) or (begin <= end_day and begin >= begin_day) or (end >= begin_day and end <= end_day) or (begin <= begin_day and end >= end_day):
							bt.color_set(0, 200, 200, 255)
							break

					# mark current day red
					if day == today.day and month == today.month and year == today.year:
						bt.color_set(200, 0, 0, 255)
					bt.scale_set(1)


	# called when next or previus button is clicked
	def show_month(self, obj, year, month, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarMonth(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month)

	# called when day is clicked
	def show_day(self, obj, year, month, day, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month, day)


class CalendarDay(elementary.Box):

	def __init__(self, mainwin):
		elementary.Box.__init__(self, mainwin.mainbox)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		self.mainwin = mainwin
		self.mainwin.mainbox.scale_set(1)

	def show(self, year, month ,day):
		elementary.Box.show(self)
		date = datetime.datetime(year, month, day)
		row = 0;

		# shows the current day
		title_label = elementary.Label(self)
		self.pack_end(title_label)
		title_label.size_hint_weight_set(0.0, 0.0)
		title_label.text_set( str(date.date()) )
		title_label.show()

		sc = elementary.Scroller(self)
		sc.size_hint_align_set(-1.0,-1.0)
		sc.size_hint_weight_set(1.0, 1.0)
		sc.bounce_set(False, True)
		self.pack_end(sc)
		sc.show()

		# put table into scroller
		self.table = elementary.Table(sc)
		self.table.show()
		self.table.size_hint_align_set(-1.0,-1.0)
		self.table.size_hint_weight_set(1.0, 1.0)
		#self.table.homogenous_set(True)
		sc.content_set(self.table)
		#box.pack_after(self.table, title_label)
		self.table.scale_set(1)

		# contains back and new butten
		navbox = elementary.Table(self)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		self.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		# back to month button
		backbt = elementary.Button(navbox)
		backbt._callback_add("clicked", self.show_month, year, month)
		backbt.text_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		# new button
		newbt = elementary.Button(navbox)
		newbt._callback_add("clicked", self.add_entry, year, month, day)
		newbt.text_set(_("New"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)

		# add hours to the table
		for h in range(0,24):
			l = elementary.Label(self.table)
			l.text_set( str(h) +"h")
			l.show()
			self.table.pack(l,0,row,1,6)
			row += 6
			l.scale_set(1)

		# calculate the begin and end of the day
		begin_day = date
		end_day = date + datetime.timedelta(hours=24)

		# (end <= end_day and begin >= begin_day) or 
		# (begin <= end_day and begin >= begin_day) or 
		# (end >= begin_day and end <= end_day) or 
		# (begin <= begin_day and end >= end_day):

		opimd = Opimd("Dates")
		results = opimd.query({'>Begin':time.mktime(begin_day.timetuple()), '<End':time.mktime(end_day.timetuple())})
		results.extend( opimd.query({'<Begin':time.mktime(end_day.timetuple()), '>Begin':time.mktime(begin_day.timetuple()), '>End':time.mktime(end_day.timetuple())}) )
		results.extend( opimd.query({'>End':time.mktime(begin_day.timetuple()), '<End':time.mktime(end_day.timetuple()), '<Begin':time.mktime(begin_day.timetuple())}) )
		results.extend( opimd.query({'<Begin':time.mktime(begin_day.timetuple()), '>End':time.mktime(end_day.timetuple())}) )

		levels = [[]]

		for i in results:
			end = datetime.datetime.fromtimestamp(float(i['End']))
			begin = datetime.datetime.fromtimestamp(float(i['Begin']))

			if (end <= end_day and begin >= begin_day) or (begin <= end_day and begin >= begin_day) or (end >= begin_day and end <= end_day) or (begin <= begin_day and end >= end_day):
				col = 1
				# only show the part of this day
				if begin < begin_day: 
					begin = begin_day
				if end > end_day:
					end = end_day

				length = int((time.mktime(end.timetuple()) - time.mktime(begin.timetuple()))/600)
				if length<6:
					length = 6
				start = (begin - begin_day).seconds/600

				# check for collisions
				newlevel = False
				for level in levels:
					newlevel = False
					for nr in range(start, start+length):
						if nr in level:
							newlevel = True
							break
					if not newlevel:
						break
					col += 1
				if newlevel:
					levels.append([])
				for nr in range(start, start+length):
					levels[col-1].append(nr)

				# add a button for this entry
				entry = elementary.Button(self.table)
				if i.get('Title'):
					title = i['Title']
				else:
					title = _("No Title")
				entry.text_set(title)
				entry.size_hint_weight_set(1.0, 1.0)
				entry.size_hint_align_set(-1.0, -1.0)
				entry._callback_add("clicked", self.show_entry, i["Path"])
				entry.show()
				self.table.pack(entry,col,start,1,length)
				entry.scale_set(1)


	# called when next or previus button is clicked
	def show_month(self, obj, year, month, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarMonth(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month)


	# called when entry button is clicked
	def add_entry(self, obj, year, month, day, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = AddCalendarEntry(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(date=datetime.date(year,month,day))


	# called when entry button is clicked
	def show_entry(self, obj, path, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarEntry(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(path)



class AddCalendarEntry(elementary.Box):

	def __init__(self, mainwin):
		elementary.Box.__init__(self, mainwin.mainbox)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		self.mainwin = mainwin

	def show(self, *args, **kargs):
		elementary.Box.show(self)

		if kargs.get('date'):
			data = None
			date = kargs['date']
		if kargs.get('path'):
			opimd = Opimd("Dates")
			data = opimd.get(kargs['path'])
			date = datetime.date.fromtimestamp(data['Begin'])
		if kargs.get('data'):
			data = kwargs['data']
			date = datetime.date.fromtimestamp(data['Begin'])

		sc = elementary.Scroller(self)
		sc.show()
		sc.size_hint_align_set(-1.0,-1.0)
		sc.size_hint_weight_set(1.0, 1.0)
		self.pack_start(sc)

		box = elementary.Table(sc)
		#box.homogenous_set(True)
		box.size_hint_weight_set(1.0, 0.0)
		box.size_hint_align_set(-1.0, -1.0)
		sc.content_set(box)
		box.show()

		# Title
		title_label = elementary.Label(box)
		box.pack(title_label,0,0,1,1)
		title_label.text_set( _("Title:") )
		title_label.show()
		title_label.size_hint_align_set(0.0, 0.0)

		title_frame = elementary.Frame(box)
		title_frame.style_set('outdent_top')
		title_frame.show()
		title_frame.size_hint_weight_set(1.0, 0.0)
		title_frame.size_hint_align_set(-1.0, 0.0)
		self.title = elementary.Entry(box)
		if data:
			if data.get('Title'):
				self.title.entry_insert(data['Title'])
		self.title.show()
		self.title.editable_set(True)
		self.title.single_line_set(True)
		self.title.size_hint_align_set(-1.0, 0.5)
		title_frame.content_set(self.title)
		box.pack(title_frame,1,0,1,1)

		# Begin
		begin_label = elementary.Label(box)
		box.pack(begin_label,0,1,1,1)
		begin_label.text_set( _("Begin:") )
		begin_label.show()
		begin_label.size_hint_align_set(0.0, 0.0)

		begin_frame = elementary.Frame(box)
		begin_frame.style_set('outdent_top')
		begin_frame.show()
		begin_frame.size_hint_weight_set(1.0, 0.0)
		begin_frame.size_hint_align_set(-1.0, 0.0)
		self.begin_day = elementary.Entry(box)
		if data:
			if data.get('Begin'):
				self.begin_day.entry_insert(str(datetime.date.fromtimestamp(data['Begin'])))
		else:
			self.begin_day.entry_set(str(date))
		self.begin_day.single_line_set(True)
		self.begin_day.editable_set(True)
		self.begin_day.show()
		self.begin_day.size_hint_align_set(-1.0, 0.5)
		begin_frame.content_set(self.begin_day)
		box.pack(begin_frame,1,1,1,1)

		self.begin_time = elementary.Clock(box)
		box.pack(self.begin_time,1,2,1,1)
		self.begin_time.edit_set(True)
		if data:
			if data.get('Begin'):
				time = datetime.datetime.fromtimestamp(data['Begin'])
				self.begin_time.time_set(time.hour, time.minute, time.second)
		self.begin_time.show()

		# End
		end_label = elementary.Label(box)
		box.pack(end_label,0,3,1,1)
		end_label.text_set( _("End:") )
		end_label.show()
		end_label.size_hint_align_set(0.0, 0.0)

		end_frame = elementary.Frame(box)
		end_frame.style_set('outdent_top')
		end_frame.show()
		end_frame.size_hint_weight_set(1.0, 0.0)
		end_frame.size_hint_align_set(-1.0, 0.0)
		self.end_day = elementary.Entry(box)
		if data:
			if data.get('End'):
				self.end_day.entry_set(str(datetime.date.fromtimestamp(data['End'])))
		else:
			self.end_day.entry_set(str(date))
		self.end_day.single_line_set(True)
		self.end_day.editable_set(True)
		self.end_day.show()
		self.end_day.size_hint_align_set(-1.0, 0.5)
		end_frame.content_set(self.end_day)
		box.pack(end_frame,1,3,1,1)

		self.end_time = elementary.Clock(box)
		box.pack(self.end_time,1,4,1,1)
		self.end_time.edit_set(True)
		if data:
			if data.get('End'):
				time = datetime.datetime.fromtimestamp(data['End'])
				self.end_time.time_set(time.hour, time.minute, time.second)
		self.end_time.show()

		# Back, Next
		navbox = elementary.Box(box)
		navbox.size_hint_align_set(-1.0, -1.0)
		navbox.size_hint_weight_set(1.0, 1.0)
		navbox.show()
		navbox.homogenous_set(True)
		navbox.horizontal_set(True)
		box.pack(navbox,0,5,2,1)

		backbt = elementary.Button(navbox)
		backbt._callback_add("clicked", self.show_day, date.year, date.month, date.day)
		backbt.text_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, 0.0)
		backbt.show()
		navbox.pack_start(backbt)

		newbt = elementary.Button(box)
		if data:
			newbt._callback_add("clicked", self.update_entry, date.year, date.month, date.day, data['Path'])
		else:
			newbt._callback_add("clicked", self.add_entry, date.year, date.month, date.day)
		newbt.text_set(_("Save"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, 0.0)
		newbt.show()
		navbox.pack_end(newbt)


	# called when entry button is clicked
	def show_day(self, obj, year, month, day, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month, day)

	# called when entry button is clicked
	def update_entry(self, obj, year, month, day, path, *args, **kargs):
		if self.title.entry_get()=='':
			title = ''
		else:
			title = elementary.Entry.markup_to_utf8(self.title.entry_get()).strip()

		begin_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.begin_day.entry_get()).strip(),"%Y-%m-%d")
		begin_time = datetime.time(self.begin_time.time_get()[0],self.begin_time.time_get()[1],self.begin_time.time_get()[2])

		end_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.end_day.entry_get()).strip(),"%Y-%m-%d")
		end_time = datetime.time(self.end_time.time_get()[0],self.end_time.time_get()[1],self.end_time.time_get()[2])

		begin = time.mktime(datetime.datetime.combine(begin_day,begin_time).timetuple())
		end = time.mktime(datetime.datetime.combine(end_day,end_time).timetuple())

		opimd = Opimd("Dates")
		opimd.delete(path)
		opimd.add({'Title':title, 'Begin':begin, 'End':end })

		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month, day)

	# called when entry button is clicked
	def add_entry(self, obj, year, month, day, *args, **kargs):
		if self.title.entry_get()=='':
			title = ''
		else:
			title = elementary.Entry.markup_to_utf8(self.title.entry_get()).strip()

		begin_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.begin_day.entry_get()).strip(),"%Y-%m-%d")
		begin_time = datetime.time(self.begin_time.time_get()[0],self.begin_time.time_get()[1],self.begin_time.time_get()[2])

		end_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.end_day.entry_get()).strip(),"%Y-%m-%d")
		end_time = datetime.time(self.end_time.time_get()[0],self.end_time.time_get()[1],self.end_time.time_get()[2])

		begin = time.mktime(datetime.datetime.combine(begin_day,begin_time).timetuple())
		end = time.mktime(datetime.datetime.combine(end_day,end_time).timetuple())

		opimd = Opimd("Dates")
		opimd.add({'Title':title, 'Begin':begin, 'End':end })

		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month, day)



class CalendarEntry(elementary.Box):

	def __init__(self, mainwin):
		elementary.Box.__init__(self, mainwin.mainbox)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		self.mainwin = mainwin


	def show(self, path):
		elementary.Box.show(self)

		self.opimd = Opimd("Dates")
		result = self.opimd.get(path)
		entry = result.GetContent()
		
		begin = datetime.datetime.fromtimestamp(entry["Begin"])
		end = datetime.datetime.fromtimestamp(entry["End"])

		sc = elementary.Scroller(self)
		sc.size_hint_align_set(-1.0,-1.0)
		sc.size_hint_weight_set(1.0, 1.0)
		sc.bounce_set(False, True)
		self.pack_end(sc)
		sc.show()

		# contains back and new button
		navbox = elementary.Table(self)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		self.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		# back to month button
		backbt = elementary.Button(navbox)
		backbt._callback_add("clicked", self.show_day, begin.year, begin.month, begin.day)
		backbt.text_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		# delete button
		newbt = elementary.Button(navbox)
		newbt._callback_add("clicked", self.del_entry, path, begin.year, begin.month, begin.day)
		newbt.text_set(_("Delete"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)

		# Box with infos
		box = elementary.Box(self)
		box.show()
		box.size_hint_align_set(-1.0,-1.0)
		box.size_hint_weight_set(1.0, 1.0)
		sc.content_set(box)

		title_label = elementary.Label(self)
		box.pack_end(title_label)
		title_label.size_hint_weight_set(0.0, 0.0)
		if entry.get('Title'):
			title_label.text_set( _("Title:")+" "+entry['Title'] )
		title_label.show()

		begin_label = elementary.Label(self)
		box.pack_end(begin_label)
		begin_label.size_hint_weight_set(0.0, 0.0)
		begin_label.text_set( _("Begin:")+" "+str(begin) )
		begin_label.show()

		end_label = elementary.Label(self)
		box.pack_end(end_label)
		end_label.size_hint_weight_set(0.0, 0.0)
		end_label.text_set( _("End:")+" "+str(end) )
		end_label.show()

	# called when entry button is clicked
	def show_day(self, obj, year, month, day, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month, day)

	# called when delete button is clicked
	def del_entry(self, obj, path, year, month, day, *args, **kargs):
		self.opimd.delete(path)
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(year, month, day)


class CalendarWidget(elementary.Box):

	def firstweekday_set(self, firstweekday):
		self.firstweekday = weekday
		self.calobj = calendar.Calendar(self.firstweekday)
		self._update_view()

	def date_icon_set(self, day, icon):
		daystr = str(self.current_year)+"."+str(self.current_month)+"."+str(day)
		self.buttons[daystr].icon_set(icon)
		#self._update_view()

	def date_state_set(self, day, state):
		""" 
		* - Free
		* - Busy
		* - Partly busy
		* - Holiday
		"""
		daystr = str(self.current_year)+"."+str(self.current_month)+"."+str(day)
		if state == 'Free':
			pass
		elif state == 'Busy':
			self.buttons[daystr].color_set(0, 200, 200, 255)
		elif state == 'Partly busy':
			self.buttons[daystr].color_set(0, 200, 200, 255)
		elif state == 'Holiday':
			self.buttons[daystr].color_set(0, 200, 200, 255)
		#self._update_view()

	def current_month_get(self):
		return self.current_month

	def current_day_get(self):
		return self.current_day

	def current_year_get(self):
		return self.current_year

	def show(self):
		elementary.Box.show(self)
		self.t.show()

	def __init__(self, parent):
		elementary.Box.__init__(self, parent)
		today = datetime.date.today()
		self.firstweekday = calendar.MONDAY
		self.current_month = today.month
		self.current_year = today.year
		self.current_day = today.day
		self.calobj = calendar.Calendar(self.firstweekday)
		self._update_view()
		self.buttons = {}

	def _update_view(self):
		if self.t:
			del self.t
		self.t = elementary.Table(self)
		self.pack_start(self.t)
		self.t.size_hint_align_set(-1.0, 0.0)
		self.t.size_hint_weight_set(1.0, 1.0)
		self.t.homogenous_set(True)
		row = 0

		# calculate previus month
		if self.current_month <= 1:
			prevyear = self.current_year - 1
			prevmonth = 12
		else:
			prevyear = self.current_year
			prevmonth = self.current_month - 1

		# previus month button
		prevbt = elementary.Button(self.t)
		prevbt._callback_add("clicked", self._set_view, prevyear, prevmonth)
		prevbt.text_set("< ")        
		prevbt.show()                                    
		self.t.pack(prevbt,row,0,1,1)

		# put month and year in first row
		title_label = elementary.Label(self.t)
		self.t.pack(title_label,1,row,5,1)
		title_label.show()
		title_label.text_set( month_strings[ self.current_month-1 ] + " " + str(self.current_year) )

		# calculate next month
		if self.current_month >= 12:
			nextyear = self.current_year + 1
			nextmonth = 1
		else:
			nextyear = self.current_year
			nextmonth = self.current_month + 1

		# next month button
		nextbt = elementary.Button(self.t)
		nextbt._callback_add("clicked", self._set_view, nextyear, nextmonth)    
		nextbt.text_set(" >")                                
		nextbt.show()                                    
		self.t.pack(nextbt,6,row,1,1)

		# put day names in second row
		row += 1
		for e in range(0,7):
			l = elementary.Label(self.t)
			l.text_set(day_names[e])
			l.size_hint_align_set(0.5,0.5)
			l.show()
			l.scale_set(1)
			self.t.pack(l,e,row,1,1)

		for week in self.calobj.monthdays2calendar(self.current_year, self.current_month):
			row += 1
			for (day,weekday) in week:
				if day > 0:
					daystr = str(self.current_year)+"."+str(self.current_month)+"."+str(day)
					self.buttons[daystr] = elementary.Button(self.t)
					self.buttons[daystr]._callback_add("clicked", self._button_pressed, day)
					self.buttons[daystr].size_hint_weight_set(1.0, 1.0)
					self.buttons[daystr].text_set( str( day ) )
					self.buttons[daystr].show()
					self.t.pack(self.buttons[daystr],weekday,row,1,1)

	def _set_view(self, year, month, obj, *args, **kargs):
		self.current_year = year
		self.current_month = month
		self.current_day = -1
		self._update_view()

	def _button_pressed(self, obj, day, *args, **kargs):
		self.current_day = day
		for c in self.callbacks:
			if c['args']:
				c['callback'](c['args'])
			else:
				c['callback']()

	def _callback_add(self, event, callback, *args, **kargs):
		if event == 'date,clicked':
			self.callback.append({'callback':callback, 'args':args})
		else:
			self._callback_add(event, callback)



if __name__ == "__main__":
    
	MainWindow()
	elementary.run()
	elementary.shutdown()

    
