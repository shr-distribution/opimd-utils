#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
opimd-dates

(C) 2009 Thomas Zimmermann <zimmermann@vdm-design.de>
GPLv2 or later

Simple calendar app using opimd-dates domain
"""

import elementary, ecore
import gettext
import calendar
import datetime
import time
import e_dbus, dbus
from functools import partial


try:
	cat = gettext.Catalog("opimd-dates")
	_ = cat.gettext
except IOError:
	_ = lambda x: x

# names of the months
month_strings = [ _("January"), _("February"), _("March"), _("April"), _("May"), _("June"), _("July"), _("August"), _("September"), _("October"), _("November"), _("December") ]
# shortnames of the days
day_names = [ _("Mon"), _("Tue"), _("Wed"), _("Thu"), _("Fri"), _("Sat"), _("Sun")  ]



class Opimd:
	""" A python singleton """

	class __impl:
		""" Implementation of the singleton interface """

		def __init__(self, domain = "Dates"):
			self.bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())
			self.dates = self.getDbusObject (self.bus, "org.freesmartphone.opimd", "/org/freesmartphone/PIM/"+domain, "org.freesmartphone.PIM."+domain)
			self.querypath = "org.freesmartphone.PIM."+domain[:-1]+"Query"
			self.domain = domain

		# define some nice dbus helper, which I really like, cause make code easier to read :)
		def getDbusObject (self, bus, busname , objectpath , interface):
			dbusObject = self.bus.get_object(busname, objectpath)
			return dbus.Interface(dbusObject, dbus_interface=interface)

		def dbus_ok(self, *args, **kwargs):
			pass

		def dbus_err(self, x): 
			print "dbus error: " + str(x)

		def query(self, q):
			x = self.dates.Query(q)
			query = self.getDbusObject (self.bus, "org.freesmartphone.opimd", x, self.querypath)
			results = query.GetMultipleResults(query.GetResultCount())
			query.Dispose(reply_handler = self.dbus_ok, error_handler = self.dbus_err)
			return results

		def add(self, dic):
			self.dates.Add(dic)

		def get(self, path):
			return self.getDbusObject (self.bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM."+self.domain[:-1])

		def delete(self, path):
			obj = self.getDbusObject (self.bus, "org.freesmartphone.opimd", path, "org.freesmartphone.PIM."+self.domain[:-1])
			obj.Delete()

	# storage for the instance reference
	__instance = None

	def __init__(self, domain):
		""" Create singleton instance """
		# Check whether we already have an instance
		if Opimd.__instance is None:
			# Create and remember instance
			Opimd.__instance = Opimd.__impl(domain)

		# Store instance reference as the only member in the handle
		self.__dict__['_Singleton__instance'] = Opimd.__instance

	def __getattr__(self, attr):
		""" Delegate access to implementation """
		return getattr(self.__instance, attr)

	def __setattr__(self, attr, value):
		""" Delegate access to implementation """
		return setattr(self.__instance, attr, value)



class MainWindow:

	def destroy(self, obj, event, *args, **kargs):
		elementary.exit()


	def __init__(self):
		elementary.init()
		elementary.c_elementary.finger_size_set(35)
		self.win = elementary.Window("opimd-dates", elementary.ELM_WIN_BASIC)
		self.win.title_set(_("Dates"))
		self.win.destroy = self.destroy

		# add background to main window
		bg = elementary.Background(self.win)
		self.win.resize_object_add(bg)
		bg.size_hint_weight_set(1.0, 1.0)
		bg.show()
		bg.scale_set(1)

		# main container contains the calendar and the Quit button
		self.mainbox = elementary.Box(self.win)
		self.mainbox.size_hint_weight_set(1.0, 1.0)
		self.win.resize_object_add(self.mainbox)
		self.mainbox.show()
		self.mainbox.scale_set(1)

		# quit button
		quitbt = elementary.Button(self.mainbox)
		quitbt.clicked = self.destroy      
		quitbt.label_set(_("Quit"))        
		quitbt.size_hint_align_set(-1.0, 0.0)
		#quitbt.size_hint_weight_set(1.0, 1.0)
		ic = elementary.Icon(quitbt)         
		ic.file_set( "/usr/share/pixmaps/icon_quit.png" )
		ic.smooth_set(1)                                 
		ic.scale_set(1, 1)                               
		quitbt.icon_set(ic)                              
		quitbt.show()                                    
		self.mainbox.pack_end(quitbt)

		# calendar
		today = datetime.date.today()
		self.cal = CalendarMonth(self)
		self.mainbox.pack_start(self.cal)
		self.cal.show(today.year,today.month)
		self.cal.scale_set(1)

		# show main window
		self.win.show()



class CalendarMonth(elementary.Table):

	# sets first day of the week
	firstweekday = calendar.MONDAY


	def __init__(self,mainwin):
		elementary.Table.__init__(self,mainwin.mainbox)
		self.mainwin = mainwin
		mainwin.mainbox.scale_set(1)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		# set table homogenous
		self.homogenous_set(True)
		self.calobj = calendar.Calendar(self.firstweekday)
		self.scale_set(1)


	def setfirstweekday(weekday):
		self.firstweekday = weekday
		self.calobj = calendar.Calendar(self.firstweekday)


	def show(self,year,month):
		elementary.Table.show(self)
		row = 0

		# put month and year in first row
		title_label = elementary.Label(self)
		self.pack(title_label,row,0,7,1)
		title_label.show()
		title_label.label_set( month_strings[ month-1 ] + " " + str(year) )

		# contains previus and next butten, located in the 9th row
		navbox = elementary.Table(self)
		navbox.homogenous_set(True)
		#navbox.size_hint_align_set(-1.0,-1.0)
		navbox.size_hint_weight_set(1.0, 1.0)
		self.pack(navbox,0,8,7,1)
		navbox.show()
		navbox.scale_set(1)

		# calculate previus month
		if month <= 1:
			prevyear = year - 1
			prevmonth = 12
		else:
			prevyear = year
			prevmonth = month - 1

		# previus month button
		prevbt = elementary.Button(navbox)
		prevbt._callback_add("clicked", (self.show_month, [prevyear, prevmonth]))    
		prevbt.label_set("< " + month_strings[ prevmonth - 1 ] + " " + str(prevyear))        
		prevbt.size_hint_weight_set(1.0, 1.0)                            
		prevbt.show()                                    
		navbox.pack(prevbt,0,0,1,1)
		prevbt.scale_set(1)

		# calculate next month
		if month >= 12:
			nextyear = year + 1
			nextmonth = 1
		else:
			nextyear = year
			nextmonth = month + 1

		# next month button
		nextbt = elementary.Button(navbox)
		nextbt._callback_add("clicked", (self.show_month, [nextyear, nextmonth]))    
		nextbt.label_set(month_strings[ nextmonth - 1 ] + " " + str(nextyear) + " >")        
		nextbt.size_hint_weight_set(1.0, 1.0)                            
		nextbt.show()                                    
		navbox.pack(nextbt,1,0,1,1)
		nextbt.scale_set(1)

		# put day names in second row
		row += 1
		for e in range(0,7):
			l = elementary.Label(self)
			l.label_set(day_names[e])
			l.size_hint_align_set(0.5,0.5)
			l.show()
			l.scale_set(1)
			self.pack(l,e,row,1,1)

		today = datetime.date.today()
		begin_month = datetime.date(year,month,1)
		if month == 12:
			end_month = datetime.date(year+1,1,1)
		else:
			end_month = datetime.date(year,month+1,1)

		opimd = Opimd("Dates")
		results = opimd.query({'_gt_Begin':(time.mktime(begin_month.timetuple())-604800), '_lt_End':(time.mktime(end_month.timetuple())+604800)})

		# fill rows 3 to 8 with days
		for week in self.calobj.monthdays2calendar(year, month):
			row += 1
			for (day,weekday) in week:
				if day > 0:
					bt = elementary.Button(self)
					bt.size_hint_weight_set(1.0, 1.0)
					#bt.size_hint_align_set(0.5, 0.5)
					bt._callback_add("clicked", (self.show_day, [year, month, day]))
					bt.label_set( str( day ) )
					bt.show()
					self.pack(bt,weekday,row,1,1)

					# check for dates at this day, if there are mark yellow 
					date = datetime.datetime(year, month, day)
					begin_day = date
					end_day = date + datetime.timedelta(hours=24)
					for i in results:
						end = datetime.datetime.fromtimestamp(float(i['End']))
						begin = datetime.datetime.fromtimestamp(float(i['Begin']))
						if (end <= end_day and begin >= begin_day) or (begin <= end_day and begin >= begin_day) or (end >= begin_day and end <= end_day) or (begin <= begin_day and end >= end_day):
							bt.color_set(0, 200, 200, 255)
							break

					# mark current day red
					if day == today.day and month == today.month and year == today.year:
						bt.color_set(200, 0, 0, 255)
					bt.scale_set(1)


	# called when next or previus button is clicked
	def show_month(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarMonth(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0],arguments[1])
		self.mainwin.cal.scale_set(1)


	# called when day is clicked
	def show_day(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)

		self.mainwin.cal.show(arguments[0],arguments[1],arguments[2])
		self.mainwin.cal.scale_set(1)


class CalendarDay(elementary.Box):

	def __init__(self, mainwin):
		elementary.Box.__init__(self, mainwin.mainbox)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		self.mainwin = mainwin
		self.mainwin.mainbox.scale_set(1)

	def show(self, year, month ,day):
		elementary.Box.show(self)
		date = datetime.datetime(year, month, day)
		row = 0;

		# shows the current day
		title_label = elementary.Label(self)
		self.pack_end(title_label)
		title_label.size_hint_weight_set(0.0, 0.0)
		title_label.label_set( str(date.date()) )
		title_label.show()

		sc = elementary.Scroller(self)
		sc.size_hint_align_set(-1.0,-1.0)
		sc.size_hint_weight_set(1.0, 1.0)
		sc.bounce_set(False, True)
		self.pack_end(sc)
		sc.show()

		# put table into scroller
		self.table = elementary.Table(sc)
		self.table.show()
		self.table.size_hint_align_set(-1.0,-1.0)
		self.table.size_hint_weight_set(1.0, 1.0)
		#self.table.homogenous_set(True)
		sc.content_set(self.table)
		#box.pack_after(self.table, title_label)
		self.table.scale_set(1)

		# contains back and new butten
		navbox = elementary.Table(self)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		self.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		# back to month button
		backbt = elementary.Button(navbox)
		backbt._callback_add("clicked", (self.show_month, [year, month]))
		backbt.label_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		# new button
		newbt = elementary.Button(navbox)
		newbt._callback_add("clicked", (self.add_entry, [year, month, day]))
		newbt.label_set(_("New"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)

		# add hours to the table
		for h in range(0,24):
			l = elementary.Label(self.table)
			l.label_set( str(h) +"h")
			l.show()
			self.table.pack(l,0,row,1,6)
			row += 6
			l.scale_set(1)

		# calculate the begin and end of the day
		begin_day = date
		end_day = date + datetime.timedelta(hours=24)

		# (end <= end_day and begin >= begin_day) or 
		# (begin <= end_day and begin >= begin_day) or 
		# (end >= begin_day and end <= end_day) or 
		# (begin <= begin_day and end >= end_day):

		opimd = Opimd("Dates")
		results = opimd.query({'_gt_Begin':time.mktime(begin_day.timetuple()), '_lt_End':time.mktime(end_day.timetuple())})
		results.extend( opimd.query({'_lt_Begin':time.mktime(end_day.timetuple()), '_gt_Begin':time.mktime(begin_day.timetuple()), '_gt_End':time.mktime(end_day.timetuple())}) )
		results.extend( opimd.query({'_gt_End':time.mktime(begin_day.timetuple()), '_lt_End':time.mktime(end_day.timetuple()), '_lt_Begin':time.mktime(begin_day.timetuple())}) )
		results.extend( opimd.query({'_lt_Begin':time.mktime(begin_day.timetuple()), '_gt_End':time.mktime(end_day.timetuple())}) )

		levels = [[]]

		for i in results:
			end = datetime.datetime.fromtimestamp(float(i['End']))
			begin = datetime.datetime.fromtimestamp(float(i['Begin']))

			if (end <= end_day and begin >= begin_day) or (begin <= end_day and begin >= begin_day) or (end >= begin_day and end <= end_day) or (begin <= begin_day and end >= end_day):
				col = 1
				# only show the part of this day
				if begin < begin_day: 
					begin = begin_day
				if end > end_day:
					end = end_day

				length = int((time.mktime(end.timetuple()) - time.mktime(begin.timetuple()))/600)
				if length<6:
					length = 6
				start = (begin - begin_day).seconds/600

				# check for collisions
				newlevel = False
				for level in levels:
					newlevel = False
					for nr in range(start, start+length):
						if nr in level:
							newlevel = True
							break
					if not newlevel:
						break
					col += 1
				if newlevel:
					levels.append([])
				for nr in range(start, start+length):
					levels[col-1].append(nr)

				# add a button for this entry
				entry = elementary.Button(self.table)
				if i.get('Title'):
					title = i['Title']
				else:
					title = _("No Title")
				entry.label_set(title)
				entry.size_hint_weight_set(1.0, 1.0)
				entry.size_hint_align_set(-1.0, -1.0)
				entry._callback_add("clicked", (self.show_entry, [i["Path"],]))
				entry.show()
				self.table.pack(entry,col,start,1,length)
				entry.scale_set(1)


	# called when next or previus button is clicked
	def show_month(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarMonth(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0],arguments[1])
		self.mainwin.cal.scale_set(1)


	# called when entry button is clicked
	def add_entry(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = AddCalendarEntry(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(date=datetime.date(arguments[0],arguments[1],arguments[2]))
		self.mainwin.cal.scale_set(1)


	# called when entry button is clicked
	def show_entry(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarEntry(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0])
		self.mainwin.cal.scale_set(1)



class AddCalendarEntry(elementary.Box):

	def __init__(self, mainwin):
		elementary.Box.__init__(self, mainwin.mainbox)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		self.mainwin = mainwin


	def pager_promote(self, content, *args, **kargs):
		self.pager.content_promote(content)

	def focusToContent(self, content, *args, **kargs):
		print "enter"
		content.focus()

	def show(self, *args, **kargs):
		elementary.Box.show(self)

		if kargs.get('date'):
			data = None
			date = kargs['date']
		if kargs.get('path'):
			opimd = Opimd("Dates")
			data = opimd.get(kargs['path'])
			date = datetime.date.fromtimestamp(data['Begin'])
		if kargs.get('data'):
			data = kwargs['data']
			date = datetime.date.fromtimestamp(data['Begin'])

		self.pager = elementary.Pager(self)
		self.pager.size_hint_align_set(-1.0,-1.0)
		self.pager.size_hint_weight_set(1.0, 1.0)
		self.pack_start(self.pager)
		self.pager.show()

		# Box with end date
		end_box = elementary.Box(self.pager)
		end_box.show()
		end_box.size_hint_align_set(-1.0,-1.0)
		end_box.size_hint_weight_set(1.0, 1.0)
		self.pager.content_push(end_box)
		# Box with begin date
		begin_box = elementary.Box(self.pager)
		begin_box.show()
		begin_box.size_hint_align_set(-1.0,-1.0)
		begin_box.size_hint_weight_set(1.0, 1.0)
		self.pager.content_push(begin_box)
		# Box with title
		title_box = elementary.Box(self.pager)
		title_box.show()
		title_box.size_hint_align_set(-1.0,-1.0)
		title_box.size_hint_weight_set(1.0, 1.0)
		self.pager.content_push(title_box)


		# Content of title_box
		title_label = elementary.Label(title_box)
		title_box.pack_end(title_label)
		title_label.size_hint_weight_set(0.0, 0.0)
		title_label.label_set( _("Title:") )
		title_label.show()

		title_frame = elementary.Frame(title_box)
		title_frame.style_set('outdent_top')
		title_frame.show()
		title_frame.size_hint_weight_set(1.0, 0.0)
		title_frame.size_hint_align_set(-1.0, 0.0)
		self.title = elementary.Entry(title_frame)
		if data:
			if data.get('Title'):
				self.title.entry_set(data['Title'])
		title_frame.content_set(self.title)
		title_box.pack_end(title_frame)
		self.title.size_hint_weight_set(1.0, 0.0)
		self.title.size_hint_align_set(-1.0, 0.0)
		self.title.show()

		navbox = elementary.Table(title_box)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		title_box.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		backbt = elementary.Button(navbox)
		backbt._callback_add("clicked", (self.show_day, [date.year, date.month, date.day]))
		backbt.label_set(_("Cancel"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		newbt = elementary.Button(navbox)
		newbt.clicked = partial(self.pager_promote, begin_box)
		newbt.label_set(_("Continue"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)


		# Content of begin_box
		begin_label = elementary.Label(begin_box)
		begin_box.pack_end(begin_label)
		begin_label.size_hint_weight_set(0.0, 0.0)
		begin_label.label_set( _("Begin:") )
		begin_label.show()

		begin_frame = elementary.Frame(begin_box)
		begin_frame.style_set('outdent_top')
		begin_frame.show()
		self.begin_day = elementary.Entry(begin_frame)
		begin_frame.content_set(self.begin_day)
		begin_box.pack_end(begin_frame)
		if data:
			if data.get('Begin'):
				self.begin_day.entry_set(str(datetime.date.fromtimestamp(data['Begin'])))
		else:
			self.begin_day.entry_set(str(date))
		self.begin_day.size_hint_weight_set(1.0, 0.0)
		self.begin_day.single_line_set(True)
		self.begin_day.show()

		self.begin_time = elementary.Clock(begin_box)
		begin_box.pack_end(self.begin_time)
		self.begin_time.edit_set(True)
		if data:
			if data.get('Begin'):
				time = datetime.datetime.fromtimestamp(data['Begin'])
				self.begin_time.time_set(time.hour, time.minute, time.second)
		self.begin_time.size_hint_weight_set(0.0, 0.0)
		self.begin_time.show()

		navbox = elementary.Table(begin_box)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		begin_box.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		backbt = elementary.Button(navbox)
		backbt.clicked = partial(self.pager_promote, title_box)
		backbt.label_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		newbt = elementary.Button(navbox)
		newbt.clicked = partial(self.pager_promote, end_box)
		newbt.label_set(_("Continue"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)


		# Content of end_box
		end_label = elementary.Label(end_box)
		end_box.pack_end(end_label)
		end_label.size_hint_weight_set(0.0, 0.0)
		end_label.label_set( _("End:") )
		end_label.show()

		end_frame = elementary.Frame(end_box)
		end_frame.style_set('outdent_top')
		end_frame.show()
		self.end_day = elementary.Entry(end_frame)
		end_frame.content_set(self.end_day)
		end_box.pack_end(end_frame)
		if data:
			if data.get('End'):
				self.end_day.entry_set(str(datetime.date.fromtimestamp(data['End'])))
		else:
			self.end_day.entry_set(str(date))
		self.end_day.size_hint_weight_set(1.0, 0.0)
		self.end_day.single_line_set(True)
		self.end_day.show()

		self.end_time = elementary.Clock(end_box)
		end_box.pack_end(self.end_time)
		self.end_time.edit_set(True)
		if data:
			if data.get('End'):
				time = datetime.datetime.fromtimestamp(data['End'])
				self.end_time.time_set(time.hour, time.minute, time.second)
		self.end_time.size_hint_weight_set(0.0, 0.0)
		self.end_time.show()

		navbox = elementary.Table(end_box)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		end_box.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		backbt = elementary.Button(navbox)
		backbt.clicked = partial(self.pager_promote, begin_box)
		backbt.label_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		newbt = elementary.Button(navbox)
		if data:
			newbt._callback_add("clicked", (self.update_entry, [date.year, date.month, date.day, data['Path']]))
		else:
			newbt._callback_add("clicked", (self.add_entry, [date.year, date.month, date.day]))
		newbt.label_set(_("Save"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)


	# called when entry button is clicked
	def show_day(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0],arguments[1],arguments[2])
		self.mainwin.cal.scale_set(1)

	# called when entry button is clicked
	def update_entry(self, obj, event, arguments, *args, **kargs):
		title = elementary.Entry.markup_to_utf8(self.title.entry_get()).strip()

		begin_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.begin_day.entry_get()).strip(),"%Y-%m-%d")
		begin_time = datetime.time(self.begin_time.time_get()[0],self.begin_time.time_get()[1],self.begin_time.time_get()[2])

		end_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.end_day.entry_get()).strip(),"%Y-%m-%d")
		end_time = datetime.time(self.end_time.time_get()[0],self.end_time.time_get()[1],self.end_time.time_get()[2])

		begin = time.mktime(datetime.datetime.combine(begin_day,begin_time).timetuple())
		end = time.mktime(datetime.datetime.combine(end_day,end_time).timetuple())

		opimd = Opimd("Dates")
		opimd.delete(arguments[3])
		opimd.add({'Title':title, 'Begin':begin, 'End':end })

		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0],arguments[1],arguments[2])
		self.mainwin.cal.scale_set(1)

	# called when entry button is clicked
	def add_entry(self, obj, event, arguments, *args, **kargs):
		title = elementary.Entry.markup_to_utf8(self.title.entry_get()).strip()

		begin_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.begin_day.entry_get()).strip(),"%Y-%m-%d")
		begin_time = datetime.time(self.begin_time.time_get()[0],self.begin_time.time_get()[1],self.begin_time.time_get()[2])

		end_day = datetime.datetime.strptime(elementary.Entry.markup_to_utf8(self.end_day.entry_get()).strip(),"%Y-%m-%d")
		end_time = datetime.time(self.end_time.time_get()[0],self.end_time.time_get()[1],self.end_time.time_get()[2])

		begin = time.mktime(datetime.datetime.combine(begin_day,begin_time).timetuple())
		end = time.mktime(datetime.datetime.combine(end_day,end_time).timetuple())

		opimd = Opimd("Dates")
		opimd.add({'Title':title, 'Begin':begin, 'End':end })

		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0],arguments[1],arguments[2])
		self.mainwin.cal.scale_set(1)



class CalendarEntry(elementary.Box):

	def __init__(self, mainwin):
		elementary.Box.__init__(self, mainwin.mainbox)
		self.size_hint_align_set(-1.0,-1.0)
		self.size_hint_weight_set(1.0, 1.0)
		self.mainwin = mainwin


	def show(self, path):
		elementary.Box.show(self)

		self.opimd = Opimd("Dates")
		result = self.opimd.get(path)
		entry = result.GetContent()
		
		begin = datetime.datetime.fromtimestamp(entry["Begin"])
		end = datetime.datetime.fromtimestamp(entry["End"])

		sc = elementary.Scroller(self)
		sc.size_hint_align_set(-1.0,-1.0)
		sc.size_hint_weight_set(1.0, 1.0)
		sc.bounce_set(False, True)
		self.pack_end(sc)
		sc.show()

		# contains back and new button
		navbox = elementary.Table(self)
		navbox.homogenous_set(True)
		navbox.size_hint_weight_set(1.0, 0.0)
		navbox.size_hint_align_set(-1.0, -1.0)
		self.pack_end(navbox)
		navbox.show()
		navbox.scale_set(1)

		# back to month button
		backbt = elementary.Button(navbox)
		backbt._callback_add("clicked", (self.show_day, [begin.year, begin.month, begin.day]))
		backbt.label_set(_("Back"))
		backbt.size_hint_weight_set(1.0, 1.0)
		backbt.size_hint_align_set(-1.0, -1.0)
		backbt.show()
		navbox.pack(backbt,0,0,1,1)
		backbt.scale_set(1)

		# delete button
		newbt = elementary.Button(navbox)
		newbt._callback_add("clicked", (self.del_entry, [path, begin.year, begin.month, begin.day]))
		newbt.label_set(_("Delete"))
		newbt.size_hint_weight_set(1.0, 1.0)
		newbt.size_hint_align_set(-1.0, -1.0)
		newbt.show()
		navbox.pack(newbt,1,0,1,1)
		newbt.scale_set(1)

		# Box with infos
		box = elementary.Box(self)
		box.show()
		box.size_hint_align_set(-1.0,-1.0)
		box.size_hint_weight_set(1.0, 1.0)
		sc.content_set(box)

		title_label = elementary.Label(self)
		box.pack_end(title_label)
		title_label.size_hint_weight_set(0.0, 0.0)
		if entry.get('Title'):
			title_label.label_set( _("Title:")+" "+entry['Title'] )
		title_label.show()

		begin_label = elementary.Label(self)
		box.pack_end(begin_label)
		begin_label.size_hint_weight_set(0.0, 0.0)
		begin_label.label_set( _("Begin:")+" "+str(begin) )
		begin_label.show()

		end_label = elementary.Label(self)
		box.pack_end(end_label)
		end_label.size_hint_weight_set(0.0, 0.0)
		end_label.label_set( _("End:")+" "+str(end) )
		end_label.show()

	# called when entry button is clicked
	def show_day(self, obj, event, arguments, *args, **kargs):
		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[0],arguments[1],arguments[2])
		self.mainwin.cal.scale_set(1)


	# called when delete button is clicked
	def del_entry(self, obj, event, arguments, *args, **kargs):
		self.opimd.delete(arguments[0])

		self.mainwin.cal.delete()
		self.mainwin.cal = CalendarDay(self.mainwin)
		self.mainwin.mainbox.pack_start(self.mainwin.cal)
		self.mainwin.cal.show(arguments[1],arguments[2],arguments[3])
		self.mainwin.cal.scale_set(1)



if __name__ == "__main__":
    
	MainWindow()
	elementary.run()
	elementary.shutdown()

    
